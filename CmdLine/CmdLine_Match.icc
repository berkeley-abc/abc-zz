//_________________________________________________________________________________________________
//|                                                                                      -- INFO --
//| Name        : CmdLine_Match.icc
//| Author(s)   : Niklas Een
//| Module      : CmdLine
//| Description : Match a string against a type signature.
//| 
//| (C) Copyright 2010-2014, The Regents of the University of California
//|________________________________________________________________________________________________
//|                                                                                  -- COMMENTS --
//| Exports:
//| 
//|    bool CLI_match(CLI_Val& val, const CLI_Sig& sig)
//|    bool CLI_check(const CLI_Val& val, const CLI_Sig& sig)
//|________________________________________________________________________________________________


static
bool match(CLI_Val& val, const CLI_Sig& sig, bool update)
{
    assert(!val.matched);       // -- should only call this for unmatched values

    switch (sig.type){
    case cli_Bool:{
        if (val.type != cli_String) return false;
        try{
            bool value;
            if      (eq (val.string_val.c_str(), "1"    )) value = true;
            else if (eq (val.string_val.c_str(), "0"    )) value = false;
            else if (eqi(val.string_val.c_str(), "true" )) value = true;
            else if (eqi(val.string_val.c_str(), "false")) value = false;
            else if (eqi(val.string_val.c_str(), "on"   )) value = true;
            else if (eqi(val.string_val.c_str(), "off"  )) value = false;
            else if (eqi(val.string_val.c_str(), "yes"  )) value = true;
            else if (eqi(val.string_val.c_str(), "no"   )) value = false;
            else
                return false;

            if (update){
                val.type = cli_Bool;
                val.bool_val = value;
                val.matched = true;
            }
            return true;
        }catch(...){
            return false;
        }
    }

    case cli_Int:{
        if (val.type != cli_String) return false;
        try{
            int64 num = stringToInt64(val.string_val);
            if (num < sig.int_range.lo || num > sig.int_range.hi)
                return false;
            if (update){
                val.type = cli_Int;
                val.int_range = sig.int_range;
                val.int_val = num;
                val.matched = true;
            }
            return true;
        }catch(...){
            return false;
        }
    }

    case cli_Float:{
        if (val.type != cli_String) return false;
        try{
            double num = stringToDouble(val.string_val);
            if (num < sig.float_range.lo || (sig.float_range.lo_strict && num == sig.float_range.lo)
            ||  num > sig.float_range.hi || (sig.float_range.hi_strict && num == sig.float_range.hi))
                return false;
            if (update){
                val.type = cli_Float;
                val.float_range = sig.float_range;
                val.float_val = num;
                val.matched = true;
            }
            return true;
        }catch(...){
            return false;
        }
    }

    case cli_Enum:{
        if (val.type != cli_String) return false;
        Vec<String>& es = *sig.enum_range;
        for (uind i = 0; i < es.size(); i++){
            if (val.string_val == es[i]){
                if (update){
                    val.type = cli_Enum;
                    val.enum_range = new Vec<String>;
                    sig.enum_range->copyTo(*val.enum_range);
                    val.enum_val = uint(i);
                    val.matched = true;
                }
                return true;
            }
        }
        return false;
    }

    case cli_String:{
        if (val.type != cli_String) return false;
        if (update)
            val.matched = true;
        return true;
    }

    case cli_Tuple:{
        if (val.type != cli_Tuple && val.type != cli_List) return false;   // -- NOTE! We are implicitly casting lists to tuples (but not vice versa)
        Vec<CLI_Sig>& ss = *sig.sub;
        Vec<CLI_Val>& vs = *val.sub;
        if (vs.size() != ss.size())
            return false;
        for (uind i = 0; i < vs.size(); i++)
            if (!match(vs[i], ss[i], false))
                return false;
        if (update){
            for (uind i = 0; i < vs.size(); i++)
                match(vs[i], ss[i], true);
            val.matched = true;
        }
        return true;
    }

    case cli_List:{
        if (val.type != cli_List) return false;
        Vec<CLI_Sig>& ss = *sig.sub; assert(ss.size() == 1);
        Vec<CLI_Val>& vs = *val.sub;
        for (uind i = 0; i < vs.size(); i++)
            if (!match(vs[i], ss[0], false))
                return false;
        if (update){
            for (uind i = 0; i < vs.size(); i++)
                match(vs[i], ss[0], true);
            val.matched = true;
        }
        return true;
    }

    case cli_Any:{
        if (update)
            val.matched = true;
        return true;
    }

    case cli_Or:{
        Vec<CLI_Sig>& ss = *sig.sub;
        for (uind i = 0; i < ss.size(); i++){
            if (match(val, ss[i], update)){
                if (update)
                    val.choice = int(i);
                return true;
            }
        }
        return false;
    }

    default: assert(false); return false; }
}


// Specializes the strings of 'val' to fit the signature 'sig', or returns FALSE if no match was possible.
// If several matches are possible, the first found ("left most") is used.
bool CLI_match(CLI_Val& val, const CLI_Sig& sig)
{
    return match(val, sig, true);
}


// Just check if 'val' matches 'sig'.
bool CLI_check(const CLI_Val& val, const CLI_Sig& sig)
{
    return match(const_cast<CLI_Val&>(val), sig, false);
}
