//_________________________________________________________________________________________________
//|                                                                                      -- INFO --
//| Name        : CmdLine_CLI.icc
//| Author(s)   : Niklas Een
//| Module      : CmdLine
//| Description : Implementation of CLI class.
//| 
//| (C) Copyright 2010-2014, The Regents of the University of California
//|________________________________________________________________________________________________
//|                                                                                  -- COMMENTS --
//| 
//|________________________________________________________________________________________________


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Public methods:


CLI::~CLI()
{
    for (uind i = 0; i < args.size(); i++){
        dispose(args[i].fst.sig);
        dispose(args[i].snd);
    }
}


void CLI::add(String arg_name, String arg_signature, String default_value, String help_text, int arg_pos)
{
    CLI_Sig sig;
    CLI_Val val;

    // Check that argument name does not contain invalid characters:
    for (uind i = 0; i < arg_name.size(); i++){
        if (arg_name[i] == '=' || arg_name[i] == '\\' || isWS(arg_name[i])){
            ShoutLn "ERROR! Argument names cannot contain '=', '\\', or white spaces: \a*%_\a*", arg_name;
            goto Error; }
    }

    // Check that argument name is unique:
    if (has(arg_name)){
        ShoutLn "ERROR! Argument declared twice: \a*%_\a*", arg_name;
        goto Error; }

    // Check that ellipsis argument does not have a position:
    if (arg_name.size() == 3 && arg_name[0] == '.' && arg_name[1] == '.' && arg_name[2] == '.'){
        if (arg_pos != -1){
            ShoutLn "ERROR! Special ellipsis argument cannot have a position.";
            goto Error;
        }
    }

    sig = CLI_parseSignature(arg_signature.c_str());
    if (sig.type == cli_ERROR){
        // Invalid signatures are considered "compile time" error of the program, so okay to just abort here: (should never happen unless there are bugs)
        ShoutLn "%s", *sig.error_msg;
        goto Error; }

    if (default_value != "" && default_value != arg_REQUIRED){
        val = CLI_parseValue(default_value.c_str());
        if (val.type == cli_ERROR){
            // Default values should also be correct:
            ShoutLn "%s", *val.error_msg;
            goto Error; }

        if (!CLI_match(val, sig)){
            // ...and they should match the signature:
            ShoutLn "ERROR! Default value does not match signature: \a*%_ : %_\a*", val, sig;
            goto Error; }
    }

    args.push(tuple(CLI_Arg(arg_name, sig, default_value, arg_pos, help_text), val));
    return;

Error:
    ShoutLn "  arg_name      : %_", arg_name;
    ShoutLn "  arg_signature : %_", arg_signature;
    ShoutLn "  default_value : %_", default_value;
    ShoutLn "  arg_pos       : %_", arg_pos;
    exit(-1);
}


// First call will be the default command unless 'make_default' is TRUE for some later call.
void CLI::addCommand(String command_name, String help_text, CLI* sub_cli)
{
    // Check that name does not contain invalid characters:
    for (uind i = 0; i < command_name.size(); i++){
        if (command_name[i] == '=' || command_name[i] == '\\' || isWS(command_name[i])){
            ShoutLn "ERROR! Command names cannot contain '=', '\\', or white spaces: \a*%_\a*", command_name;
            exit(-1); }
    }

    // Check for duplicates:
    for (uind i = 0; i < cmds.size(); i++){
        if (cmds[i].name == command_name){
            ShoutLn "ERROR! Command declared twice: \a*%_\a*", command_name;
            exit(-1); }
    }

    // Add command:
    cmds.push(CLI_Cmd(command_name, help_text, sub_cli));
}


void CLI::postProcess(CLI_PostProcessFun0 fun)
{
    post_process.push();
    post_process.last().type = 0;
    post_process.last().fun0 = fun;
    post_process.last().data = NULL;
}


void CLI::postProcess(CLI_PostProcessFun1 fun, void* data)
{
    post_process.push();
    post_process.last().type = 1;
    post_process.last().fun1 = fun;
    post_process.last().data = data;
}


bool CLI::has(String arg_name)
{
    return getIfExist(arg_name);
}


void CLI::embed(CLI& cli_, String prefix)
{
    embedded.push(tuple(&cli_, prefix));
}


bool CLI::unbed(CLI& cli_)
{
    for (uind i = 0; i < embedded.size(); i++){
        if (embedded[i].fst == &cli_){
            for (uind j = i+1; j < embedded.size(); j++)
                embedded[j-1] = embedded[j];
            embedded.pop();
            return true;
        }
    }
    return false;
}


//=================================================================================================
// -- Reading result:


// Examples of usage:
//
//    get("my-arg").string_val    (also defined for enums)
//    get("my-arg").bool_val
//    get("my-arg").int_val
//    get("my-arg").float_val
//    get("my-arg").enum_val
//
const CLI_Val& CLI::get(String arg_name) const
{
    const Pair<CLI_Arg,CLI_Val>* tmp = getIfExist(arg_name);
    if (tmp)
        return tmp->snd;

    // "compile time" error to ask for a non-existent argument:
    ShoutLn "ERROR! CLI argument not declared: \a*%_\a*", arg_name;
    exit(-1);
}


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Internal helpers:


// Split 'text' on white-spaces, except if it is within brackets or after a '\' (actually '\' will
// swallow the next character, so "space after an odd number of '\'" is more accurate; and
// similarily, sequence '\(' and '\)' does not count as brackets).
static
void group(String text_, Vec<String>& elems)
{
    // Quote delimiter characters not withing parenthesis (except the ',' in front of a command):
    String text;
    int  depth = 0;
    for (uind i = 0; i < text_.size(); i++){
        if (text_[i] == '(' || text_[i] == '[' || text_[i] == '{')
            depth++;
        else if (text_[i] == ')' || text_[i] == ']' || text_[i] == '}')
            depth--;
        else if (depth == 0 && !isWS(text_[i]) && cliIsValDelim(text_[i]) && (text_[i] != ',' || (i > 0 && !isWS(text_[i-1]))))
            text += '\\';
        text += text_[i];
    }

    // Group command line:
    Vec<char> tmp;
    uind start = 0;
    uind i     = 0;
    depth = 0;
    for (; i < text.size(); i++){
        if (depth == 0){
            if (isWS(text[i])){
                if (start < i)
                    elems.push(text.sub(start, i));
                start = i+1;
            }else if (text[i] == '\\' && i+1 < text.size())
                i++;
            else if (text[i] == '(' || text[i] == '[' || text[i] == '{')
                depth++;

        }else{
            if (text[i] == '\\' && i+1 < text.size())
                i++;
            else if (text[i] == '(' || text[i] == '[' || text[i] == '{')
                depth++;
            else if (text[i] == ')' || text[i] == ']' || text[i] == '}')
                depth--;
        }
    }

    if (start < i)
        elems.push(text.sub(start, i));
}


static
void verifyPositionalArguments(const Vec<Pair<CLI_Arg,CLI_Val> >& args)
{
    // Verify consistency of positional argument:
    Vec<uchar> used;
    for (uind i = 0; i < args.size(); i++){
        int pos = args[i].fst.pos;
        if (pos == -1) continue;

        used(pos,0)++;
        if (used[pos] > 1){
            // "compile time" error
            ShoutLn "ERROR! Overlapping positional argument: \a*%_\a* at position \a*%_\a*\n", args[i].fst.name, pos;
            exit(-1);
        }
    }
    for (uind i = 0; i < used.size(); i++){
        if (used[i] != 1){
            // "compile time" error
            ShoutLn "ERROR! Gap in positional arguments: position \a*%_\a* missing\n", i;
            exit(-1);
        }
    }
}


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


Pair<CLI_Arg,CLI_Val>* CLI::getIfExist(String arg_name)
{
    for (uind i = 0; i < args.size(); i++){
        if (args[i].fst.name == arg_name)
            return &args[i];
    }

    for (uind i = 0; i < embedded.size(); i++){
        String prefix = embedded[i].snd;
        if (hasPrefix(arg_name, prefix)){
            String sub = arg_name.sub(prefix.size());
            Pair<CLI_Arg,CLI_Val>* tmp = embedded[i].fst->getIfExist(sub);
            if (tmp)
                return tmp;
        }
    }
    return NULL;
}


// Parses 'val' and assigns it to argument 'name' if (a) it exists, and (b) is not already
// defined. On error 'error_msg' is produced and FALSE returned.
bool CLI::setArg(String name, String val_text, Vec<String>& defined, String& error_msg)
{
    if (ZZ::has(defined, name)){
        error_msg %= "ERROR! Argument specified twice: \a*%_\a*", name;
        return false; }

    Pair<CLI_Arg,CLI_Val>* tmp = getIfExist(name);

    if (!tmp){
        error_msg %= "ERROR! Undefined argument: \a*%_\a*", name;
        return false; }

    CLI_Sig& sig = tmp->fst.sig;
    CLI_Val& val = tmp->snd;

    val = CLI_parseValue(val_text.c_str());
    if (val.type == cli_ERROR){
        error_msg = String("ERROR! ") + *val.error_msg;
        return false; }

    if (!CLI_match(val, sig)){
        error_msg %= "ERROR! Argument '\a*-%_=%_\a*' does not match type: \a*%_\a*", name, val_text, sig;
        return false; }

    defined.push(name);
    return true;
}


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


bool CLI::verifyRequired(const Vec<String>& is_defined, String prefix, String& error_msg) const
{
    for (uind i = 0; i < args.size(); i++){
        if (args[i].fst.default_ == arg_REQUIRED){
            String full_name = prefix + args[i].fst.name;
            if (!ZZ::has(is_defined, full_name)){
                error_msg %= "ERROR! Missing required argument: \a*%_\a*", full_name;
                return false;
            }
        }
    }

    for (uind i = 0; i < embedded.size(); i++){
        if (!embedded[i].fst->verifyRequired(is_defined, prefix + embedded[i].snd, error_msg))
            return false;
    }

    return true;
}


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Printing help:


static
void wordWrap(String& out, cchar* p, uint& col, uint margin, uint columns)
{
    while (*p != 0 && *p == ' ') p++;

    while (*p != 0){
        cchar* start = p;
        while (*p != 0 && *p != ' ') p++;
        if (col + 1 + (p - start) > columns){
            out += "\n";
            for (uint i = 0; i < margin; i++) out += ' ';
            col = margin;
        }else{
            out += ' ';
            col++;
        }

        while (start != p){
            out += *start;
            start++;
            col++;
        }
        while (*p != 0 && *p == ' ') p++;
    }
}


void CLI::printHelp(String& error_msg, uint columns, String prog_name, String prefix, bool show_hidden)
{
    if (prog_name != ""){
        // Top separator:
        error_msg += "\a/\a*";
        for (uint i = 0; i < columns; i++) error_msg += '-';
        error_msg += "\a/\a*";
        error_msg += "\n";

        // Header:
        uint   min_head_len = prog_name.size();
        error_msg %= "\a*%_\a*", prog_name;

        uint head_len = min_head_len;
        Vec<String*> arg_names;
        Vec<bool>    arg_req;
        for (uind i = 0; i < args.size(); i++){
            if (args[i].fst.pos != -1){
                arg_names(args[i].fst.pos) = &args[i].fst.name;
                arg_req  (args[i].fst.pos) = args[i].fst.default_ == arg_REQUIRED;
            }
        }
        for (uind i = 0; i < arg_names.size(); i++){
            String extra;
            if (arg_req[i]) extra += " <", *arg_names[i], ">";
            else            extra += " [<", *arg_names[i], ">]";

            if (head_len + extra.size() > columns){
                error_msg += '\n';
                for (uint j = 0; j < min_head_len; j++) error_msg += ' ';
                head_len = min_head_len;
            }

            error_msg += extra;
            head_len += extra.size();
        }
        error_msg += "\n\n";
    }

    // Arguments:
    uint descr_col = max_(4u, columns / 4);
    if (args.size() > 0 && prog_name != "")
        error_msg += "ARGUMENTS:\n";

    for (uind i = 0; i < args.size(); i++){
        String tmp = (FMT "    -%_%_=<%_> ", prefix, args[i].fst.name, args[i].fst.sig);
        error_msg %= "    \a*-%_%_\a*=<%_> ", prefix, args[i].fst.name, args[i].fst.sig;
        if (tmp.size() > descr_col){
            error_msg += "\n";
            for (uint j = 0; j < descr_col; j++) error_msg += ' ';
        }else{
            for (uint j = tmp.size(); j < descr_col; j++) error_msg += ' ';
        }

        error_msg %= "\a/--";
        uint col = descr_col + 2;
        wordWrap(error_msg, args[i].fst.help.c_str(), col, descr_col, columns);
        error_msg += "\a/";

        String def = (args[i].fst.default_ == arg_REQUIRED) ? String(" (req.)") :
                     (args[i].fst.default_ == "")           ? String() :
                                                            (FMT " [%_]", args[i].fst.default_);
        if (col + def.size() > columns){
            error_msg += "\n";
            for (uint j = 0; j < descr_col - 1; j++) error_msg += ' ';
        }
        error_msg %= "\a/\a*%_\a/\a*\n", def;
    }

    // Embedded arguments:
    for (uind i = 0; i < embedded.size(); i++){
        if (embedded[i].fst != &cli_hidden && embedded[i].fst->args.size() > 0){
            error_msg += "  Command specific:\n";
            embedded[i].fst->printHelp(error_msg, columns, "", prefix + embedded[i].snd);
        }
    }

    // Hidden arguments:
    if (show_hidden){
        for (uind i = 0; i < embedded.size(); i++){
            if (embedded[i].fst == &cli_hidden && embedded[i].fst->args.size() > 0){
                error_msg += "  Hidden arguments:\n";
                embedded[i].fst->printHelp(error_msg, columns, "", prefix + embedded[i].snd);
            }
        }
    }

    if (prog_name != ""){
        // Commands:
        if (args.size() > 0)
            error_msg += '\n';
        if (cmds.size() > 0)
            error_msg += "COMMANDS:\n";

        uint descr_col2 = max_(4u, columns / 4 - 4);
        for (uind j = 0; j < cmds.size(); j++){
            //if ((j == 0 && args.size() > 0) || (j > 0 && cmds[j-1].sub_cli) || cmds[j].sub_cli)
            if (j > 0 && (cmds[j-1].sub_cli || cmds[j].sub_cli))
                error_msg += '\n';

            error_msg %= "  \a*,%_\a* ", cmds[j].name;
            uint col = 4 + cmds[j].name.size();
            while (col < descr_col2){
                error_msg += ' ';
                col++; }

            error_msg %= "\a/==";
            col += 2;
            wordWrap(error_msg, cmds[j].help.c_str(), col, descr_col2, columns);
            if (j == 0){
                error_msg += "\a*";
                wordWrap(error_msg, " (default)", col, descr_col2, columns);
                error_msg += "\a*"; }
            error_msg += "\a/\n";

            if (cmds[j].sub_cli)
                cmds[j].sub_cli->printHelp(error_msg, columns, "", "");
        }

        // Footer and bottom separator:
        error_msg += "\a/\a*";
        for (uint i = 0; i < columns; i++) error_msg += '-';
        error_msg += "\a/\a*";
    }
}


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Parsing command line:


bool CLI::parseCmdLine(String command_line, String& error_msg, uint columns, String prog_name, bool embed_cmd_cli)
{
    verifyPositionalArguments(args);

    CLI* to_unbed = NULL;
    Vec<String> elems;
    group(command_line, elems);

    // Get command:
    bool explicit_cmd = false;
    for (uind i = 0; i < elems.size(); i++){
        String s = elems[i];
        if (s[0] == ','){
            cmd = s.sub(1);
            explicit_cmd = true;
            for (uind j = 0; j < cmds.size(); j++){
                if (cmds[j].name == cmd){
                    if (cmds[j].sub_cli){
                        to_unbed = cmds[j].sub_cli;
                        embed(*cmds[j].sub_cli, "");   // -- embed arguments of chosen command
                    }
                    goto FoundCmd;
                }
            }
            error_msg %= "ERROR! Invalid command: \a*%_\a*", cmd;
            return false;
        }
    }

    if (cmds.size() > 0){
        cmd = cmds[0].name;
        if (cmds[0].sub_cli){
            to_unbed = cmds[0].sub_cli;
            embed(*to_unbed, "");   // -- embed arguments of default command
        }
    }
  FoundCmd:;

    // Print help?
    for (uind i = 0; i < elems.size(); i++){
        bool show_hidden = (eq(elems[i], "-H") || eqi(elems[i], "-help-all") || eqi(elems[i], "--help-all"));
        bool show_help   = show_hidden || (eq(elems[i], "-h") || eqi(elems[i], "-help") || eqi(elems[i], "--help") || eqi(elems[i], "-?"));
        if (show_help){
            if (!explicit_cmd){
                unbed(*to_unbed);
                printHelp(error_msg, columns, prog_name, "", show_hidden);
            }else{
                Vec<CLI_Cmd> tmp;
                cmds.moveTo(tmp);
                printHelp(error_msg, columns, prog_name + " ," + cmd, "", show_hidden);
                tmp.moveTo(cmds);
                unbed(*to_unbed);
            }
            return false;
        }
    }

    // Get arguments:
    Vec<String> is_defined;
    int pos = 0;
    for (uind i = 0; i < elems.size(); i++){
        String s = elems[i];
        if (s[0] == ','){
            continue;

        }else if (s == "--"){       // -- allows for switches to be set a second time
            is_defined.clear();

        }else if (s[0] == '-'){
            uind start = (s[1] == '-') ? 2 : 1;
            uind eqpos = search(s, '=');
            String name, val = "1";
            if (eqpos == UIND_MAX)
                name = s.sub(start);
            else{
                name = s.sub(start, eqpos);
                val  = s.sub(eqpos+1);
            }

            if (name.size() > 3 && name.sub(0, 3) == "no-" && eqpos == UIND_MAX){
                name = name.sub(3);
                val = "0"; }

            if (!setArg(name, val, is_defined, error_msg)){
                unbed(*to_unbed);
                return false; }

        }else{
            bool success = false;
            for (uind j = 0; j < args.size(); j++){
                if (args[j].fst.pos == pos){
                    if (!setArg(args[j].fst.name, s, is_defined, error_msg))
                        return false;
                    success = true;
                    break;
                }
            }

          #if 1
            // New addition: handle special "..." switch:
            if (!success){
                Pair<CLI_Arg,CLI_Val>* tmp = getIfExist("...");
                if (tmp){
                    CLI_Sig& sig = tmp->fst.sig;
                    CLI_Val& val = tmp->snd;    // <<== använd extra här

                    val = CLI_parseValue(s.c_str());
                    if (val.type == cli_ERROR){
                        error_msg = String("ERROR! ") + *val.error_msg;
                        return false; }

                    if (!CLI_match(val, sig)){
                        error_msg %= "ERROR! Ellipsis argument '\a*%_\a*' does not match type: \a*%_\a*", s, sig;
                        return false; }

                    tail.push(val);
                    success = true;
                }
            }
          #endif

            if (!success){
                unbed(*to_unbed);
                error_msg %= "ERROR! Too many arguments: \a*%_\a*", s;
                return false;
            }
            pos++;
        }
    }

    // Post process the parsed CLI:
    String msg;
    for (uind i = 0; i < post_process.size(); i++){
        if (post_process[i].type == 0) error_msg = post_process[i].fun0(*this);
        else                           error_msg = post_process[i].fun1(*this, post_process[i].data);

        if (error_msg != ""){
            unbed(*to_unbed);
            return false; }
    }

    // Verify that all required arguments are defined:
    if (!verifyRequired(is_defined, "", error_msg)){
        unbed(*to_unbed);
        return false; }

    // Successful:
    if (!embed_cmd_cli)
        unbed(*to_unbed);
    return true;
}


bool CLI::parseCmdLine(int argc, char** argv, String& error_msg, uint columns, bool embed_cmd_cli)
{
    String prog_name;
    cchar* p = strrchr(argv[0], '/');
    if (p) prog_name = String(p + 1);
    else   prog_name = String(argv[0]);

    String command_line;
    for (int i = 1; i < argc; i++){
        if (i != 1) command_line += ' ';
        command_line += argv[i];
    }

    return parseCmdLine(command_line, error_msg, columns, prog_name, embed_cmd_cli);
}


void CLI::parseCmdLine(String command_line, String prog_name, bool embed_cmd_cli)
{
    String error_msg;
    if (!parseCmdLine(command_line, error_msg, getConsoleWidth() - 1, prog_name, embed_cmd_cli)){
        ShoutLn "%_", error_msg;
        if (error_msg[0] != '\a' || error_msg[1] != '/' || error_msg[2] != '\a' || error_msg[3] != '*' || error_msg[4] != '-')  // -- hack
            ShoutLn "Use '%_ -h' for command line help.", prog_name;
        exit(-1);
    }
}

void CLI::parseCmdLine(int argc, char** argv, bool embed_cmd_cli)
{
    String error_msg;
    if (!parseCmdLine(argc, argv, error_msg, getConsoleWidth() - 1, embed_cmd_cli)){
        assert(argc > 0);
        char* p = strrchr(argv[0], '/');
        String prog_name = p ? String(p+1) : String(argv[0]);

        ShoutLn "%_", error_msg;
        if (error_msg[0] != '\a' || error_msg[1] != '/' || error_msg[2] != '\a' || error_msg[3] != '*' || error_msg[4] != '-')  // -- hack
            ShoutLn "Use '%_ -h' for command line help.", prog_name;
        exit(-1);
    }
}
