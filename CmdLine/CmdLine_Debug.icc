//_________________________________________________________________________________________________
//|                                                                                      -- INFO --
//| Name        : CmdLine_Debug.icc
//| Author(s)   : Niklas Een
//| Module      : CmdLine
//| Description : Debug functions.
//| 
//| (C) Copyright 2010-2014, The Regents of the University of California
//|________________________________________________________________________________________________
//|                                                                                  -- COMMENTS --
//| 
//|________________________________________________________________________________________________


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Debug:  


void write_CLI_Sig(Out& out, const CLI_Sig& sig)
{
    switch (sig.type){
    case cli_ERROR:
        if (sig.error_msg)
            out += *sig.error_msg;
        else
            out += "NULL";
        break;

    case cli_Bool:
        out += "bool";
        break;

    case cli_Int:
        if (sig.int_range.lo == INT64_MIN){
            if (sig.int_range.hi == INT64_MAX)
                out += "int";
            else
                out += "int[:", sig.int_range.hi, ']';
        }else{
            if (sig.int_range.hi == INT64_MAX){
                if (sig.int_range.lo == 0)
                    out += "uint";
                else
                    out += "int[", sig.int_range.lo, ":]";
            }else
                out += "int[", sig.int_range.lo, ":", sig.int_range.hi, ']';
        }
        break;

    case cli_Float:
        if (sig.float_range.lo == -DBL_MAX){
            if (sig.float_range.hi == +DBL_MAX)
                out += "float";
            else
                out += "float[:", sig.float_range.hi, (sig.float_range.hi_strict?"-":""), ']';
        }else{
            if (sig.float_range.hi == +DBL_MAX){
                if (sig.float_range.lo == 0 && !sig.float_range.lo_strict && !sig.float_range.hi_strict)
                    out += "ufloat";
                else
                    out += "float[", sig.float_range.lo, (sig.float_range.lo_strict?"+":""), ":]";
            }else
                out += "float[", sig.float_range.lo, (sig.float_range.lo_strict?"+":""), ":", sig.float_range.hi, (sig.float_range.hi_strict?"-":""), ']';
        }
        break;

    case cli_String:
        out += "string";
        break;

    case cli_Any:
        out += "any";
        break;

    case cli_Enum:{
        out += '{';
        Vec<String>& ns = *sig.enum_range;
        for (uind i = 0; i < ns.size(); i++)
            out += ((i==0)?"":" "), ns[i];
        out += '}';
        }break;

    case cli_Tuple:{
        out += '(';
        Vec<CLI_Sig>& ss = *sig.sub;
        for (uind i = 0; i < ss.size(); i++){
            if (i != 0) out += ", ";
            out += ss[i];
        }
        out += ')';
        }break;

    case cli_List:{
        Vec<CLI_Sig>& ss = *sig.sub;
        assert(ss.size() == 1);
        out += '[', ss[0], ']';
        }break;

    case cli_Or:{
        Vec<CLI_Sig>& ss = *sig.sub;
        for (uind i = 0; i < ss.size(); i++){
            if (i != 0) out += " | ";
            out += ss[i];
        }
        }break;

    default: assert(false); }
}


void write_CLI_Val(Out& out, const CLI_Val& val)
{
    if (val.choice != -1)
        out += '#' , val.choice, ':';

    switch (val.type){
    case cli_ERROR:
        if (val.error_msg)
            out %= "ERROR(%_)", *val.error_msg;
        else
            out += "NULL";
        break;

    case cli_String:
        out %= "string(%_)", val.string_val;
        break;

    case cli_Tuple:{
        Vec<CLI_Val>& vs = *val.sub;
        out += '(';
        for (uind i = 0; i < vs.size(); i++){
            if (i != 0) out += ", ";
            out += vs[i];
        }
        out += ')';
        }break;

    case cli_List:{
        Vec<CLI_Val>& vs = *val.sub;
        out += '[';
        for (uind i = 0; i < vs.size(); i++){
            if (i != 0) out += ", ";
            out += vs[i];
        }
        out += ']';
        }break;

    // Matched types:
    case cli_Bool:
        out %= "bool(%_)", val.bool_val;
        break;

    case cli_Int:
        out %= "int(%_)", val.int_val;
        break;

    case cli_Float:
        out %= "float(%_)", val.float_val;
        break;

    case cli_Enum:
        out %= "enum(%_)", val.enum_val;
        break;

    default: assert(false); }
}
