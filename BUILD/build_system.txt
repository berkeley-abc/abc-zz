========================================
The ZB build system:
========================================

The central concept of the ZB build system is a "module". All source
code resides in a tree rooted by a directory containing a file
'.zb_root', and every subdirectory in the tree corresponds to a
module. The 'zb_root' file defines a name for the source tree; in this
document we will assume it to be 'ZZ'. This name is used for two
things:
  
  - All libraries produced are prefixed with 'ZZ_'. E.g.: The
    directory 'ZZ/CmdLine' will produce a library named 'ZZ_CmdLine'
    with a corresponding archive file 'libZZ_Cmdline.a'.

  - The include path given to GCC (through '-I') is set up so that
    'ZZ' points to the root of the source tree, even though the
    directory may be named differently. This is achieved by symbolic
    links. E.g.: '#include "ZZ/Generics/Map.hh' will include the
    standard hash map.

It is assumed that the ZZ directory can reside on a shared file
system. For that reason, all object files, libraries and executables
are put in a machine specific directory:

    <machine> = the string resulting from 'uname -mrs' with with
                spaces replaced by '-'.

Furthermore, each build has a target type:           
                
    <target-type> = one of: release, debug, profile, quick

These targets can be further sub-typed by a set of boolean options
(such as "with or without assertions" or "with or without debug
symbols"). Each target is built inside its own directory and different
target types (which are compiled with different flags) will never
interfere.

Example: If you do a 'zb r' in 'ZZ/CmdLine' you build the "release"
version of CmdLine module and the output will be put into:

    ZZ/CmdLine/out/Linux-3.8.0-25-generic-x86_64/release/

The string 'Linux-3.8.0-25-generic-x86_64/release' will from now
on be referred to as '<qualifier>', which is the term used in the
build script 'zb' itself. So all outputs from 'zb' is put in
 
    out/<qualifier>
    
of the current directory from which you run 'zb'.
   

========================================
Standard directories:
========================================

The following directories exist in each 'ZZ' source tree (although the
output directories "include/lib/bin" are created on their first use):

    ZZ/BUILD/
        -- Contains the build script: a standard Makefile 'module.mak'
        that is used for every module and a Python script 'zb' which
        handles recursive dependencies between modules.
        
    ZZ/include/
        -- Each module defines an external header file 'MODULE.hh'.
        This file is copied here and renamed to the name of the
        module, e.g. 'ZZ_CmdLine.hh'. This directory is always in
        the include path of GCC.
        
    ZZ/lib/<qualifier>/
        -- Library files produced in 'out/<qualifier>' are also copied
        here for other modules to use. This directory is always in 
        the link path of GCC
        
    ZZ/bin/<machine>/
        -- A module may be configured to put binaries in this "public"
        directory. You probably want to set your path to include it.
        In bash, use PATH=$PATH:~/ZZ/bin/`~/ZZ/BUILD/zb ,machine` to
        get the right string for <machine>.
        
    ZZ/Prelude/
        -- This special module is linked with every binary. It defines
       some standard stuff used in every project. All of it resides in
       namespace 'ZZ'.    
   
    
========================================
Modules:
========================================

In the ZB build system, a module is:

  - A library file
  - A header file
  - Zero, one or more executables
  
A module may depend on other sub-modules. Sub-modules are recursively
built before the parent module and cyclic module dependencies are
prohibited. The philosophy of the build system is that you should be
able to type 'zb' anywhere in the source tree and that module
(library/executables) should build correctly, tracking dependencies
both in the module itself or in any of its sub-modules. 

Furthermore, the content of a directory defines the sources of that
module:

  - All files ending in '.c' or '.cc' EXCEPT those starting with
    'Main_' defines the source files for the library. They are
    compiled and linked into a library archive.
    
  - Each '.c' or '.cc' files starting with 'Main_' (e.g.
    'Main_minisat.cc') defines an executable.
    
  - The file 'MODULE.hh' defines the modules external header file.
  It is copied into 'ZZ/include'.

  
========================================
Build commands:
========================================

The 'zb' script uses the ', == COMMAnd', with the default command
being "build a module". The most useful commands are:

  zb q  -- Build a quick release (-O0; optimized for compilation speed
           to weed out compilation errors)
  zb r  -- Build release version (-O3)
  zb p  -- Build profile version (-pg)
  zb d  -- Build debug version (just like 'zb q' but with -O1; mostly
           useful when debugging program that needs to run for a while)

  zb ,clean     -- Remove everything generated by this module
  zb ,realclean -- Recursive clean (apply ,clean to sub-modules)
  zb ,init      -- Create a boiler plate MODULE.conf file (more about 
                   this file in the next section).

Secondary types: If you type 'zb -h', in the help text there will be a
list of "SECONDARY-TYPE"s. Those are all boolean flags that can be
used to select a sub-target type. For instance 'zb ra' would build a
release version with assertions ("a") turned off. 
                   
                   
========================================
MODULE.conf:
========================================

The config file is a sequence of lines of the form "KEY = VALUE". You
may use '\' at the end of a line to break a logic line into several
physical lines. Line comments starts with '#'. Here is an example
config file:

    MOD_DEPS = ZZ_Lua ZZ_Gig ZZ_Gig.IO ZZ_LutMap
    SYS_LIBS = readline
    SYS_INCL = /alt/usr/include
    SYS_PATH = /alt/usr/lib
    DEFAULT_MODE = r
    PUBLISH_BIN = release/gip.exe -> gip 

The first line declares sub-module dependencies. The second system
library dependencies. The next two add include ('-I') and link ('-L')
paths. 'DEFAULT_MODE' defines the behavior of 'zb' if no mode is
specified. Without it 'zb' is equivalent to 'zb qr'. Finally, the last
line tells the 'zb' to copy the binary 'out/<machine>/release/gip.exe'
into 'ZZ/bin/<machine>' (the public bin directory). If you put a 
'@' in front of the name:

    PUBLISH_BIN = release/gip.exe -> @gip 
    
then the binary is copied in the current director instead. All target
modes not explicitly listed are only placed in the 'out' directory, so
it takes some typing to run them. Note that if you put a binary in the
local directory with the '@', then compiling from different machines
on a shared filesystem may cause some executables to be overwritten.
    

========================================
The EXTERN directory:
========================================
  
ZB can also interact with software built through other make systems.
All these modules are put in the special directory 'ZZ/EXTERN'. There
is a README file in that directory explaining how to add such external
modules. Important things to know:

  - External modules are not prefixed by 'ZZ_', so if you depend on
    them, your MODULE.conf would say something like 'MOD_DEPS =
    ZZ_CmdLine abc', with no 'ZZ_' in front of the external module
    'abc'. 
    
  - By default, 'zb' does NOT check dependencies for external modules
    as this may be slow. If you make a change to external code, you
    have to add a '+' to the 'zb' command line for expensive
    dependency checking.
    
      
