Build scripts must be named 'build_XXX' where 'XXX' is the name of the module.
The script should do one of:

  build     -- Build external library
  header    -- Generate external header file for the whole library
  clean	    -- Remove intermediate files and targets

All parameters are passed through the environment (no command line arguments).

If "build" is selected, then a lib file, and optionally some binaries, should
be produced in the designated directories. The generated lib file must have a
name congruent with this build script, i.e. 'build_XXX' should generate library
'libXXX.a'. "ZB_PRI_TYPE" and "ZB_SEC_TYPES" specifies primary and secondary
types, which may affect the compilation flags used. Together these are called a
"target type" and a build should build just ONE target type. 

In contrast, if "clean" is selected, ALL target types should be cleaned. No
files under "ZZ_LIB_DIR" needs to be cleaned; those files are deleted by the
"zb" build-script. Only files residing in the external modules source directory
and the binaries put in ZB_BIN_DIR should be cleaned up.

Input parameters (given through environment variables) are:

  ZB_CMD          -- one of: clean build header
  ZB_PRI_TYPE     -- one of: r p d q
  ZB_SEC_TYPES    -- subset of: absty
  ZB_LIB_DIR      -- where to put the library
  ZB_BIN_DIR      -- where to put binaries
  ZB_INCLUDE_DIR  -- where to put (external) include file for library
  ZB_FAST_DEPS    -- if '1', don't waste time on full dependency check
  ZB_VERBOSE      -- if '1', tell the user what you are doing
  ZB_MACHINE      -- name of this machine (can be used to qualify output path)
  ZB_N_CORES      -- good value to give to '-j' switch for make
  ZB_BUILD_PATH   -- path to "ZZ/BUILD" in case you need some stuff frome there

Note that ZB_LIB_DIR is unique for each target type, but ZB_BIN_DIR is not. The
contract there is that only selected binaries should be put in the "bin" dir,
and possibly renamed to avoid clashes.