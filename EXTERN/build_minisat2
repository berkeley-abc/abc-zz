#!/usr/bin/env python

import sys
import os
import re
import shutil
import tempfile


##mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
## Helpers:


def abort(message):
    pr("ERROR! %s\n" % message)
    exit(255)


def z(var):
    return os.environ["ZB_" + var]


def up_to_date(src, dst):
    return os.path.exists(dst) and os.stat(dst).st_mtime + 0.001 > os.stat(src).st_mtime



##mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
## Build:


# MINISAT_RELSYM ?= -g
# MINISAT_REL    ?= -O3 -D NDEBUG
# MINISAT_DEB    ?= -O0 -D DEBUG
# MINISAT_PRF    ?= -O3 -D NDEBUG
# MINISAT_FPIC   ?= -fpic
#
# t / no t ->  set BUILD_DIR to "zzbuild" or "zzbuild_pthreads"
# d -> set MINISAT_DEB to "-O1 -D DEBUG"
# q -> set BUILD_DIR to "zzbuild_quick" (or "zzbuild_quick_pthreads")
#
# make lr ld lp


# lr:   $(BUILD_DIR)/release/bin/libminisat.a
# ld:   $(BUILD_DIR)/debug/bin/libminisat.a
# lp:   $(BUILD_DIR)/profile/bin/libminisat.a


def build():
    # Setup makefile variables:
    flags = []
    pri   = z("PRI_TYPE")
    secs  = z("SEC_TYPES")

    CXXFLAGS = []
    LDFLAGS = []
    OTHER = []
    BUILD_DIR = "zzbuild_" + z("MACHINE")

    # -- primary type:
    if pri == "r":
        TARGET = "lr"
        TARGET_NAME = "release"
    if pri == "p":
        TARGET = "lp"
        TARGET_NAME = "profile"
    if pri == "d":
        TARGET = "ld"
        TARGET_NAME = "debug"
        OTHER.append("MINISAT_DEB=\"-O1 -DDEBUG\"")
    if pri == "q":
        TARGET = "ld"
        TARGET_NAME = "debug"
        BUILD_DIR = BUILD_DIR + "_quick"

    # -- secondary types:
    if "t" in secs:
        CXXFLAGS.append("-pthread");
        LDFLAGS.append("-pthread");
        BUILD_DIR = BUILD_DIR + "_pthread"

    # Lib file exists?
    public_target = z("LIB_DIR") + "/libminisat2.a"
    #if z("FAST_DEPS") == "1" and os.path.exists(public_target):
    #    return      # (assume up-to-date to speed things up a bit) ((no, this part is already fast enough))

    # Call makefile:
    os.chdir("minisat2")
    flags = "CXXFLAGS=%s LDFLAGS=%s BUILD_DIR=%s %s %s" % (" ".join(CXXFLAGS), " ".join(LDFLAGS), BUILD_DIR, " ".join(OTHER), TARGET)
    ret = os.system("make -s -j%s %s" % (z("N_CORES"), flags))

    # Copy results:
    if ret == 0:
        libfile = "%s/%s/lib/libminisat.a" % (BUILD_DIR, TARGET_NAME)
        if not up_to_date(libfile, public_target):
            shutil.copy2(libfile, public_target)
            print "`` Produced library: libminisat2.a"


##mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
## Header file:


def get_deps(filename):
    with os.popen("g++ -I. -M %s | %s/filter_deps" % (filename, z("BUILD_PATH")), "r") as p:
        text = p.read()
    return text.split()[2:]


# NOTE! Will loop forever on cyclic dependencies.
def order_includes(filename, out_order):
    if filename in out_order: return
    for f in get_deps(filename):
        order_includes(f, out_order)
    out_order.append(filename)


def create_header():
    out_filename = z("INCLUDE_DIR") + "/minisat2.hh"
    if z("FAST_DEPS") == "1" and os.path.exists(out_filename):
        return      # (assume up-to-date to speed things up a bit)

    os.chdir("minisat2")
    order = []
    order_includes("minisat/simp/SimpSolver.h", order)

    out = open(out_filename, "wt")
    for filename in order:
        with open(filename) as f:
            for line in f:
                if not line.startswith("#include \"minisat"):
                    out.write(line)
    out.close()
    print "`` Created header: minisat2.hh"


def clean_up():
    os.chdir("minisat2")
    os.system("rm -rvf zzbuild_*")


def main():
    if   z("CMD") == "build" : build()
    elif z("CMD") == "header": create_header()
    elif z("CMD") == "clean" : clean_up()
    else:
        abort("Unknown command: " + z("CMD"))

main()
