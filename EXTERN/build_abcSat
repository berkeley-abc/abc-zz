#!/usr/bin/env python

import sys
import os
import re
import shutil
import tempfile


##mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
## Helpers:


def abort(message):
    pr("ERROR! %s\n" % message)
    exit(255)


def z(var):
    return os.environ["ZB_" + var]


def up_to_date(src, dst):
    return os.path.exists(dst) and os.stat(dst).st_mtime + 0.001 > os.stat(src).st_mtime


##mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
## Build:


def build():       # -- assumes we are in directory 'ZZ/EXTERN/abcSat'
    # Setup compile flags:
    flags = []
    pri   = z("PRI_TYPE")
    secs  = z("SEC_TYPES")
    # -- primary type:
    if pri == "r": flags.append("-O3")
    if pri == "p": flags.append("-O1 -pg")
    if pri == "d": flags.append("-O1")
    if pri == "q": flags.append("-O0")
    # -- secondary types:
    if "t" in secs: flags.append("-pthread")
    if "a" in secs: flags.append("-DNDEBUG")
    if "s" not in secs: flags.append("-ggdb")
    opt_flags = " ".join(flags)

    # Lib file exists?
    public_target = z("LIB_DIR") + "/libabcSat.a"
    if z("FAST_DEPS") == "1" and os.path.exists(public_target):
        return      # (assume up-to-date to speed things up a bit)

    # Call build script:
    if z("VERBOSE") == "1":
        print "Build command for 'libabcSat.a': ./compile.sh " + opt_flags
    ret = os.system("./compile.sh " + opt_flags)

    # Copy results:
    target = "libabcSat.a"
    if not up_to_date(target, public_target):
        shutil.copy2(target, public_target)
        print "`` Produced library: libabcSat.a"


def create_header():        # -- assumes we are in directory 'ZZ/EXTERN/'
    filename = z("INCLUDE_DIR") + "/abcSat.hh"
    if not up_to_date("abcSat.hh", filename):
        with open("abcSat.hh", "rt") as inp:
            with open(filename, "wt") as out:
                for line in inp:
                    if line.strip() == "$MAKEFILE_DEFINES":
                        # Expand gcc commandline defines into header file syntax:
                        with os.popen("abcSat/arch_flags", "rt") as inp2:
                            text = inp2.readline()
                            text = re.sub(r" ", "\n", text)
                            text = re.sub(r"-D", "#define ", text)
                            text = re.sub(r"=", " ", text)
                        out.write(text)
                    else:
                        out.write(line)
        print "`` Created header: abcSat.hh"


def main():
    if z("CMD") == "build":
        os.chdir("abcSat")
        build()
    elif z("CMD") == "header":
        create_header()
    elif z("CMD") == "clean":
        os.system("rm -fv abcSat/libabcSat.a abcSat/arch_flags")
    else:
        abort("Unknown command: " + z("CMD"))

main()
