//_________________________________________________________________________________________________
//|                                                                                      -- INFO --
//| Name        : TechMap_CutSets.icc
//| Author(s)   : Niklas Een
//| Module      : TechMap
//| Description : Datatypes to represent cuts and sets of cuts.
//|
//| (C) Copyright 2010-2014, The Regents of the University of California
//|________________________________________________________________________________________________
//|                                                                                  -- COMMENTS --
//|
//|________________________________________________________________________________________________


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// 'Cut' class:


/*
Cut layout:

sig    : 1 uint
sizes  : 4 uchars: #inputs, offset-ftb, unused, unused
inputs : 'size' uints
pad    : 0 or 1 uint (to get to 64-bit align)
ftb    : '2^size / 64' uint64s, rounded up.
*/

class Cut {
public:
private:
    uint64* base;

    Cut&    me() const     { return *const_cast<Cut*>(this); }

    uint&   sig_()         { return ((uint*)&base[0])[0]; }

    uchar&  size_()        { return ((uchar*)&base[0])[4]; }    // -- 'size == n_inputs'
    uchar&  offFtb_()      { return ((uchar*)&base[0])[5]; }
    uchar&  reserved0_()   { return ((uchar*)&base[0])[6]; }
    uchar&  reserved1_()   { return ((uchar*)&base[0])[7]; }

    uint&   input_(uint i) { return ((uint*)&base[1])[i]; }
    uint64& ftb_(uint i)   { return base[offFtb_() + i]; }

    void init(Array<gate_id> inputs, uint64* ftb);

public:
    Cut() : base(NULL) {}
    Cut(uint64* base_) : base(base_) {}

    static uint allocSz(uint n_inputs);

    Cut(uint64* base_, Array<gate_id> inputs, uint64* ftb) : base(base_) { init(inputs, ftb); }
        // -- size of 'ftb' should be 'ceil(2^n / 64)' i.e. '(1 << inputs.size() + 63) >> 6'.

    template<class ALLOC>   // -- NOTE! 'ALLOC' should allocate 'uint64's
    Cut dup(ALLOC& allocator);

    Null_Method(Cut) { return base == NULL; }

    uint sig()                        const { return me().sig_(); }
    uint size()                       const { return me().size_(); }
    gate_id operator[](int input_num) const { return me().input_(input_num); }

    uint64 ftb(uint word_num = 0)     const { return me().ftb_(word_num); }

    uint ftbSz() const { return ((1ull << size()) + 63) >> 6; }
};


// Returns the number of 'uint64's to allocate for a cut of size 'n_inputs'.
inline uint Cut::allocSz(uint n_inputs)
{
    uint ftb_words = ((1ull << n_inputs) + 63) >> 6;
    uint alloc_sz = ((n_inputs + 3) >> 1) + ftb_words;
    return alloc_sz;
}


// Duplicate cut
template<class ALLOC>
inline Cut Cut::dup(ALLOC& allocator)
{
    uint sz = allocSz(this->size());
    uint64* new_base = allocator.alloc(sz);
    for (uint i = 0; i < sz; i++)
        new_base[i] = base[i];
    return Cut(new_base);
}


inline void Cut::init(Array<gate_id> inputs, uint64* ftb)
{
    assert(inputs.size() <= 32);
    uint ftb_words = ((1ull << inputs.size()) + 63) >> 6;
    uint alloc_sz = ((inputs.size() + 3) >> 1) + ftb_words;

    size_()      = inputs.size();
    offFtb_()    = (inputs.size() + 3) >> 1;
    reserved0_() = 0;
    reserved1_() = 0;
    assert(offFtb_() + ftb_words == alloc_sz);

    uint sig_mask = 0;
    for (uint i = 0; i < inputs.size(); i++)
        sig_mask |= 1ull << (inputs[i] & 31);
    sig_() = sig_mask;

    for (uint i = 0; i < inputs.size(); i++)
        input_(i) = inputs[i];
    if ((inputs.size() & 1) == 1)
        input_(inputs.size()) = 0;   // -- avoid uninitialized memory

    for (uint i = 0; i < ftb_words; i++)
        ftb_(i) = ftb[i];
}


template<> fts_macro void write_(Out& out, const Cut& v)
{
    FWrite(out) "Cut{";
    for (uint i = 0; i < v.size(); i++){
        if (i != 0) FWrite(out) ", ";
        FWrite(out) "w%_", v[i]; }
    FWrite(out) "}[";

    for (uint i= 0; i < v.ftbSz(); i++){    // -- perhaps reverse order
        if (i != 0) FWrite(out) ", ";
        FWrite(out) "0x%.16X", v.ftb(i); }
    FWrite(out) "]";
}


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Static cut-set:


/*
Cutset layout:

n_cuts  : 1 uint
offsets : 'n_cuts' uints
pad     : 0 or 1 uint (to get to 64-bit align)
cuts    : several uint64s
*/

class CutSet {
    uint64* data;

    uint  off (uint i) const { return ((uint*)data)[i+1]; }
    uint& off_(uint i)       { return ((uint*)data)[i+1]; }

    friend class DynCutSet;
    CutSet(uint64* data_) : data(data_) {}

public:
    CutSet() : data(NULL) {}
    Null_Method(CutSet) { return data == NULL; }

    uint size() const { return ((uint*)data)[0]; }
    Cut operator[](uint i) const { return Cut(&data[off(i)]); }

    void swap(uint i, uint j) { swp(off_(i), off_(j)); }
    void shrinkTo(uint new_size)  { assert(new_size >= size()); }   // -- just to allow for template code
};


template<> fts_macro void write_(Out& out, const CutSet& v){
    FWrite(out) "CutSet{";
    for (uint i = 0; i < v.size(); i++)
        FWrite(out) " %_", v[i];
    FWrite(out) " }";
}


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Dynamic cut-set:


// Usage: call 'begin()', define cut by modifying public variables, call 'next()', repeat this
// step, finally call 'done()' to get a static 'CutSet'. The dynamic cut set can then be reused.
class DynCutSet {
    Vec<uint64> mem;
    Vec<uint>   off;

    void clearCut() { inputs.clear(); ftb.clear(); }

    void storeCut() {
        off.push((uint)mem.size());
        mem.growTo(mem.size() + Cut::allocSz(inputs.size()));
        Cut(&mem[off[LAST]], inputs.slice(), ftb.base());
    }

public:
  //________________________________________
  //  Add a cut:

    Vec<gate_id> inputs;    // }- these fields must be populated before calling 'next()'
    Vec<uint64>  ftb;       // }

    void begin()  { mem.clear(); off.clear(); clearCut(); }
    void next ()  { storeCut(); clearCut(); }       // -- 'next()' must be called before the final 'done()'

  //________________________________________
  //  Manipulate cut set:

    uint size() const      { return off.size(); }         // -- returns the number of cuts stored by 'next()' calls
    Cut operator[](uint i) { return Cut(&mem[off[i]]); }  // -- cut is invalidated if cutset is changed (by calling 'next()')

    void swap    (uint i, uint j) { swp(off[i], off[j]); }
    void pop     ()               { assert(off.size() > 0); off.pop(); }
    void shrinkTo(uint new_size)  { if (new_size <= off.size()) off.shrinkTo(new_size); }

  //________________________________________
  //  Finalize:

    template<class ALLOC>   // -- NOTE! 'ALLOC' should allocate 'uint64's
    CutSet done(ALLOC& allocator);
};


template<class ALLOC>
CutSet DynCutSet::done(ALLOC& allocator)
{
    uint mem_needed = 0;
    for (uint i = 0; i < off.size(); i++)
        mem_needed += Cut::allocSz(Cut(&mem[off[i]]).size());

    uint off_adj = (off.size() + 2) >> 1;
    mem_needed += off_adj;
    uint64* data = allocator.alloc(mem_needed);
    uint*   tab = (uint*)data;
    tab[0] = off.size();

    for (uint i = 0; i < off.size(); i++){
        tab[i+1] = off_adj;

        uint sz = Cut::allocSz(Cut(&mem[off[i]]).size());
        memcpy(&data[off_adj], &mem[off[i]], sz * sizeof(uint64));
        off_adj += sz;
    }
    assert(off_adj == mem_needed);
    if ((off.size() & 1) == 0) tab[off.size() + 1] = 0;    // -- avoid uninitialized memory

    return CutSet(data);
}
