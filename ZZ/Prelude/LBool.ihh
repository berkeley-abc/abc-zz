//_________________________________________________________________________________________________
//|                                                                                      -- INFO --
//| Name        : LBool.ihh
//| Author(s)   : Niklas Een
//| Module      : Prelude
//| Description : Lifted boolean are either TRUE, FALSE, UNDEF, or ERROR.
//| 
//| (C) Copyright 2010-2014, The Regents of the University of California
//|________________________________________________________________________________________________
//|                                                                                  -- COMMENTS --
//| 
//| A proper domain theoretic lift would just be: true, false, bottom. The error value is added 
//| for pragmatic reasons. The semantics of negation is that 'true->false' and 'false->true' BUT 
//| 'undef->undef' and 'error->error'. To create a lifted boolean from a 'bool', use 'lbool_lift()'.
//| To read the underlying 'uchar' representation, just read the public field 'value' which is
//| always in 0..3. To create a 'lbool' from such a value, use 'lbool_new()' (view this as 
//| low-level for loading/storing 'lbool's).
//|________________________________________________________________________________________________

namespace ZZ {
using namespace std;


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Lifted booleans:


class lbool {
    explicit lbool(uchar v) : value(v) {}
    friend lbool lbool_new (uchar value);

public:
    uchar value;    // -- guaranteed to be between 0 and 3 (use 'l_True.value' etc. to find out encoding if you need it)

    lbool() : value(0) {}   // -- default construct to 'l_Undef'

    lbool operator~ ()         const { lbool ret; ret.value = value ^ (value >> 1); return ret; }
    lbool operator^ (bool neg) const { lbool ret; ret.value = value ^ ((value >> 1) & uint(neg)); return ret; }
    lbool operator^=(bool neg)       { return *this = *this ^ neg;  }
        // -- negation and "conditional negation" (= XOR)

    lbool operator&(lbool other) const { uint i = other.value | (value << 2); return lbool((0xE4A65524 >> (i+i)) & 3); }
    lbool operator|(lbool other) const { uint i = other.value | (value << 2); return lbool((0xF7F455C4 >> (i+i)) & 3); }
        // -- x & y = (x or y is Error) ? Error : (x or y is False) ? False : (x or y is Undef) ? Undef : True
        //    x | y = ~(~x & ~y)

    bool  operator==(const lbool& other) const { return value == other.value; }
    bool  operator!=(const lbool& other) const { return value != other.value; }
    bool  operator< (const lbool& other) const { return value <  other.value; }
    uind  hash      ()                   const { return uind(value); }
        // -- equality and hashing
};

inline lbool lbool_new (uchar value) { return lbool(value); }
inline lbool lbool_lift(bool x)      { return lbool_new(uchar(uint(x) | 2)); }
inline char  name      (lbool l)     { static char name[4] = {'?','!','0','1'}; return name[l.value]; }

//#if defined(ZZ_CONSTANTS_AS_MACROS)
#if 0   // -- clashes with public version of MiniSat 2.2
#define l_Undef lbool_new(0)
#define l_Error lbool_new(1)
#define l_False lbool_new(2)
#define l_True  lbool_new(3)
    // -- polluting macro name space, but unfortunatelly needed for efficiency
#else
static const lbool l_Undef = lbool_new(0);
static const lbool l_Error = lbool_new(1);
static const lbool l_False = lbool_new(2);
static const lbool l_True  = lbool_new(3);
#endif


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
}
