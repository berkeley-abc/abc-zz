//_________________________________________________________________________________________________
//|                                                                                      -- INFO --
//| Name        : Signals.icc
//| Author(s)   : Niklas Een
//| Module      : Prelude
//| Description : Signals and exit handling.
//|
//| (C) Copyright 2010-2014, The Regents of the University of California
//|________________________________________________________________________________________________
//|                                                                                  -- COMMENTS --
//|
//| Will use signals to capture crashes/interrupts, but only after first exit-function with
//| non-normal mask has been registered.
//|________________________________________________________________________________________________

namespace ZZ {
using namespace std;


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Setup signal handlers:


bool silent_interrupt = false;
bool silent_crash     = false;
static bool catching_interrupt = false;
static bool catching_crash     = false;


ZZ_Initializer(catching, -10000) {
    silent_interrupt = silent_crash = false;
    catching_interrupt = catching_crash = false;
}


extern "C" {
typedef void (*SignalHandler)(int);
}


static void catchInterrupt(SignalHandler handler);
static void catchCrash(SignalHandler handler);


#if defined(sun) || defined(__hpux) || defined(__APPLE__)
extern "C" void normalExit(){ int exit_code = 0;
#else
#ifdef __ICC
static void normalExit(int exit_code, void*){
#else
extern "C" void normalExit(int exit_code, void*){
#endif
#endif
    flushAtExits(x_Normal, exit_code);
}


#ifdef __ICC
static void interruptHandler(int signum)
#else
extern "C" void interruptHandler(int signum)
#endif
{
    catchInterrupt(SIG_DFL);

    if (!silent_interrupt){
        char buf[64];
        sprintf(buf, "\n**** INTERRUPTED **** [signal %d]\n", signum);
        ssize_t ignore ___unused = write(2/*stderr*/, buf, strlen(buf));
    }

    flushAtExits(x_Interrupt, signum * 256);

  #if !defined(ZZ_PTHREADS)
    dumpProfileData();      // -- not completely safe, but profiling is off by default, and this almost always works
  #endif

  #if defined(ZZ_PROFILE)
    zzFinalize();
    exit(-1);               // -- needed for 'gprof' to be happy
  #else
    _exit(-1);
  #endif

}


#ifdef __ICC
static void crashHandler(int signum)
#else
extern "C" void crashHandler(int signum)
#endif
{
    catchCrash(SIG_DFL);

    if (!silent_crash){
        char buf[64];
        sprintf(buf, "\n**** CRASHED **** [signal %d]\n", signum);
        ssize_t ignore ___unused = write(2/*stderr*/, buf, strlen(buf));
    }

    flushAtExits(x_Crash, signum * 256);

    raise(signum);
}


// Handle Control-C, timeouts, etc.
static void catchInterrupt(SignalHandler handler)
{
    signal(SIGINT , handler);
    signal(SIGHUP , handler);
    signal(SIGTERM, handler);
    catching_interrupt = true;
}


// Handle segmentation faults etc.
static void catchCrash(SignalHandler handler)
{
    signal(SIGABRT, handler);
    signal(SIGSEGV, handler);
    signal(SIGBUS , handler);
    catching_crash = true;
}


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Program exit handling:


struct ExitList {
    ExitFun   fun;
    void*     data;
    uint      mask;
    ExitList* next;
};


ZZ_Local_Lock(exit_list);
static ExitList* exit_list = NULL;

ZZ_Initializer(exit_list, -10000) {
    exit_list = NULL;

  #if defined(sun) || defined(__hpux) || defined(__APPLE__)
    atexit(normalExit);
  #else
    on_exit(normalExit, NULL);
  #endif
}


void flushAtExits(uint mask, uint exit_code)
{
    ZZ_Scoped_Lock(exit_list);
    while (exit_list){
        ExitList* p = exit_list;
        if (p->mask & mask)
            p->fun(p->data, exit_code);
        exit_list = p->next;
        delete p;
    }
}


void atExit(uint mask, ExitFun fun, void* data)
{
    ExitList* p = new ExitList();
    p->fun = fun;
    p->data = data;
    p->mask = mask;

    {
        ZZ_Scoped_Lock(exit_list);

        p->next = exit_list;
        exit_list = p;

        if ((mask & x_Interrupt) && !catching_interrupt)
            catchInterrupt(interruptHandler);
        if ((mask & x_Crash) && !catching_crash)
            catchCrash(crashHandler);
    }
}


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
}
