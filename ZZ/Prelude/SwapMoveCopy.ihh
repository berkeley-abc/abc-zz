//_________________________________________________________________________________________________
//|                                                                                      -- INFO --
//| Name        : SwapMoveCopy.ihh
//| Author(s)   : Niklas Een
//| Module      : Prelude
//| Description : Defines generic 'swp, mov, cpy' (swap, move, copy) functions.
//| 
//| (C) Copyright 2010-2014, The Regents of the University of California
//|________________________________________________________________________________________________
//|                                                                                  -- COMMENTS --
//| 
//| These functions are meant to be specialized for proper classes, such as 'Vec<T>' or your own
//| classes (maybe 'MyDatabase' or 'Graph') if the operations are implemented. Generic algorithms
//| like 'sort()' will use these functions.
//| 
//| Names have been truncated to avoid name clashes with 'swap', 'move', and 'copy' (often used in 
//| other code). 
//|________________________________________________________________________________________________

namespace ZZ {
using namespace std;


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm


template<class T, bool copyable> struct MoveCopy_helper;

template<class T>
struct MoveCopy_helper<T,true> {
    static void mov(T&       from, T& to) { to = from; }
    static void cpy(const T& from, T& to) { to = from; }
};

template<class T>
struct MoveCopy_helper<T,false> {
    static void mov(T&       from, T& to) { from.moveTo(to); }
    static void cpy(const T& from, T& to) { from.copyTo(to); }
};

template<class T> macro void mov(T&       from, T& to) { MoveCopy_helper<T,IsCopyable<T>::Result::value>::mov(from, to); }
template<class T> macro void cpy(const T& from, T& to) { MoveCopy_helper<T,IsCopyable<T>::Result::value>::cpy(from, to); }


template <class T>
macro void swp(T& x, T& y) {        // -- 'swap' and 'move' suffer from name clashes...
    T tmp; mov(x, tmp); mov(y, x); mov(tmp, y); }


// Raw, byte-for-byte swap:
template<class T>
void swp_mem(T& obj1, T& obj2)      // -- objects must not overlap
{
    if (&obj1 == &obj2) return;

    uchar buf[sizeof(T)];
    memcpy(buf  , &obj1, sizeof(T));
    memcpy(&obj1, &obj2, sizeof(T));
    memcpy(&obj2, buf  , sizeof(T));
}


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
}
