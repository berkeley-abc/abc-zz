//_________________________________________________________________________________________________
//|                                                                                      -- INFO --
//| Name        : Resources.icc
//| Author(s)   : Niklas Een
//| Module      : Prelude
//| Description : Inspect memory consumption, CPU time used etc.
//|
//| (C) Copyright 2010-2014, The Regents of the University of California
//|________________________________________________________________________________________________
//|                                                                                  -- COMMENTS --
//|
//|________________________________________________________________________________________________

namespace ZZ {
using namespace std;


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm


#if defined(__APPLE__) || defined(__FreeBSD__)
#include <sys/sysctl.h>
double realtime_conversion;
#endif


uint64 mem_physical;
uint   num_cpus;

double cpu_clock_last;
double real_clock_last;


ZZ_Initializer(mem_and_cpus, -10050) {
    mem_physical = UINT64_MAX;
    num_cpus     = UINT_MAX;

    cpu_clock_last  = 0;
    real_clock_last = 0;
}


#if !defined(_MSC_VER)
//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Non-windows version:


double realTime_T0;

ZZ_Initializer(realTime, -10050) {
  #if !defined(__APPLE__)
    struct timespec t;
    clock_gettime(CLOCK_MONOTONIC, &t);
    realTime_T0 = (double)t.tv_sec + (double)t.tv_nsec / 1000000000;
  #else
    mach_timebase_info_data_t tb;
    mach_timebase_info(&tb);
    realtime_conversion = 1e-9 * tb.numer / tb.denom;
    realTime_T0 = mach_absolute_time() * realtime_conversion;
  #endif
}


#if defined(__linux__) || defined(__CYGWIN__)
static
uint readProcStatus(cchar* field)
{
    uint  len = strlen(field);
    char  name[256];
    char  line[1024];
    pid_t pid = getpid();
    sprintf(name, "/proc/%d/status", (int)pid);
    FILE* in = fopen(name, "rb");
    while (!feof(in)){
        char* ret ___unused = fgets(line, sizeof(line), in);
        if (strncmp(line, field, len) == 0){
            fclose(in);
            return atoi(line + len);
        }
    }
    assert(false);
    return 0;
}


uint64 memUsed()
{
  #if defined(__CYGWIN__)
    return (uint64)readProcStatus("VmSize:") * 1024;    // -- VmPeak does not exist under Cygwin
  #else
    return (uint64)readProcStatus("VmPeak:") * 1024;
  #endif
}


uint64 memUsedNow()
{
    return (uint64)readProcStatus("VmSize:") * 1024;
}


#elif defined(sun)
uint64 memUsed()
{
    char  name[256];
    pid_t pid = getpid();
    sprintf(name, "/proc/%d/psinfo", (int)pid);
    FILE* in = fopen(name, "rb");
    psinfo_t info;
    fread(&info, sizeof(info), 1, in);
    fclose(in);
    return (uint64)info.pr_size * 1024;
}


uint64 memUsedNow()
{
    return memUsed();       // -- don't know if there is a way to distinguish the two under Solaris.
}


#elif defined(__APPLE__)

#include <mach/task.h>
#include <mach/mach_init.h>


uint64 memUsed()
{
    return memUsedNow();    // -- don't know how to get peak memory usage on Mac OS X
}

uint64 memUsedNow()
{
    struct task_basic_info t_info;
    mach_msg_type_number_t t_info_count = TASK_BASIC_INFO_COUNT;
    task_info(current_task(), TASK_BASIC_INFO, (task_info_t)&t_info, &t_info_count);
    return t_info.resident_size;
}


#elif defined(__FreeBSD__)


uint64 memUsed()
{
    struct rusage r;
    getrusage(RUSAGE_SELF, &r);
    return r.ru_maxrss * uint64(1024);
}


uint64 memUsedNow()
{
    return memUsed();
}


#else
    #error "Unsupported platform."
#endif


uint numCpus()
{
    if (num_cpus != UINT_MAX) return num_cpus;

#if defined(_SC_NPROCESSORS_ONLN)
    return num_cpus = sysconf(_SC_NPROCESSORS_ONLN);

#else
  #if defined(__linux__)
    FILE* in = fopen("/proc/cpuinfo", "rb"); assert(in);
    int   count = 0;
    char  buf[10];
    uint  i = 0;
    for(;;){
        char c = fgetc(in);
        if (feof(in)) break;
        if (c == '\n'){
            if (i == 9 && strncmp(buf, "processor", 9) == 0)
                count++;
            i = 0;
        }else if (i != 9){
            buf[i] = c;
            i++;
        }
    }
    fclose(in);

  #elif defined(__APPLE__) || defined(__FreeBSD__)
    int    mib[4];
    size_t len = 4;
    int    count = 0;
    mib[0] = CTL_HW;
    mib[1] = HW_NCPU;   // -- or 'HW_NCPU'?
    sysctl(mib, 2, &count, &len, NULL, 0);

  #else
    #error "Definition of 'numCpus()' needs to be extended for your platform."
  #endif

    return num_cpus = max_(1, count);
#endif
}


uint64 memPhysical()
{
    if (mem_physical != UINT64_MAX) return mem_physical;

#if defined(_SC_PHYS_PAGES) && defined(_SC_PAGESIZE)
    return mem_physical = uint64(sysconf(_SC_PHYS_PAGES)) * uint64(sysconf(_SC_PAGESIZE));
#else
  #if defined(__linux__)
    FILE* in = fopen("/proc/meminfo", "rb"); assert(in);
    char buf[26];
    uint i = 0;
    for(;;){
        char c = fgetc(in);
        if (feof(in)) break;
        if (c == '\n'){
            if (i == 25 && strncmp(buf, "MemTotal:", 9) == 0){
                fclose(in);
                return mem_physical = (uint64)atol(buf+9) * 1024;
            }else
                i = 0;
        }else if (i != 25){
            buf[i] = c;
            i++;
        }
    }
    assert(false);

  #elif defined(__APPLE__) || defined(__FreeBSD__)
    int    mib[4];
    size_t len = 8;
    uint64 n_bytes = 0;     // -- does this work for more than 4GB?
    mib[0] = CTL_HW;
    mib[1] = HW_PHYSMEM;
    sysctl(mib, 2, &n_bytes, &len, NULL, 0);
    return mem_physical = n_bytes;

  #else
    #error "Definition of 'memPhysical()' needs to be extended for your platform."
  #endif

#endif
}


#else
//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Windows version:


uint64 realTime_T0;
double realTime_freq;

ZZ_Initializer(realTime, -10050) {
    LARGE_INTEGER f;
    bool ok = QueryPerformanceFrequency(&f); assert(ok);
    realTime_freq = 1.0 / (uint64(f.LowPart) | (uint64(f.HighPart) << 32));

    LARGE_INTEGER t;
    ok = QueryPerformanceCounter(&t); assert(ok);
    realTime_T0 = uint64(t.LowPart) | (uint64(t.HighPart) << 32);
}


static
uint64 memQuery(bool peak)
{
    DWORD  pid  = GetCurrentProcessId();
    HANDLE proc = OpenProcess(PROCESS_QUERY_INFORMATION, FALSE, pid); assert(proc);

    PROCESS_MEMORY_COUNTERS pmc;
    bool ok = GetProcessMemoryInfo(proc, &pmc, sizeof(pmc));
    assert(ok);
    CloseHandle(proc);

    return peak ? pmc.PeakWorkingSetSize : pmc.WorkingSetSize;
}


uint64 memUsed()
{
    return memQuery(true);
}


uint64 memUsedNow()
{
    return memQuery(false);
}


uint64 memPhysical()
{
    if (mem_physical != UINT64_MAX) return mem_physical;

    MEMORYSTATUSEX buf;
    buf.dwLength = sizeof(buf);
    bool ok = GlobalMemoryStatusEx(&buf);
    assert(ok);

    return mem_physical = (uint64)buf.ullTotalPhys;
}


uint numCpus()
{
    if (num_cpus != UINT_MAX) return num_cpus;

    cchar* text = getenv("NUMBER_OF_PROCESSORS");
    uint n = text ? atoi(text) : 0;
    return num_cpus = max_(1u, n);
}


#endif
//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
}
