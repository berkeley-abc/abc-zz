//_________________________________________________________________________________________________
//|                                                                                      -- INFO --
//| Name        : File.ihh
//| Author(s)   : Niklas Een
//| Module      : Prelude
//| Description : An efficient, low-level, buffered file abstraction.
//| 
//| (C) Copyright 2010-2014, The Regents of the University of California
//|________________________________________________________________________________________________
//|                                                                                  -- COMMENTS --
//| 
//|________________________________________________________________________________________________

namespace ZZ {
using namespace std;


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm


#if defined(_MSC_VER)
    }
    macro int64 lseek64(int fd, int64 offset, int whence)    { return _lseeki64(fd, offset, whence); }
    macro int   open64 (cchar* file, int flags, int mode)    { return _open(file, flags, mode); }
    macro int   close  (int fd)                              { return _close(fd); }
    macro int   read   (int fd, void* buf, uint count)       { return _read(fd, buf, count); }
    macro int   write  (int fd, const void* buf, uint count) { return _write(fd, buf, count); }
    namespace ZZ {
#elif !defined(_LARGEFILE64_SOURCE)
  #if defined(__APPLE__) || defined(__FreeBSD__) || defined(__CYGWIN__)
    typedef off_t off64_t;
  #endif
    macro off64_t lseek64(int fd, off64_t offset, int whence) { return lseek(fd, off_t(offset), whence); }
    macro int     open64 (cchar* file, int flags, int mode)   { return open(file, flags, mode); }
#endif



#define File_BufSize 1024

enum FileMode { READ, WRITE };


class File : public Reader, public Writer {
protected:
    int         fd;         // Underlying file descriptor.
    FileMode    mode;       // Reading or writing.
    uchar*      buf;        // Read or write buffer.
    int         size;       // Size of buffer (at end of file, less than 'File_BufSize').
    int         pos;        // Current position in buffer
    bool        own_fd;     // Do we own the file descriptor? If so, will close file in destructor.

    int readBuf() { return read(fd, buf, File_BufSize); }
        // <<== handle EINTR here?

public:
    #define DEFAULTS fd(-1), mode(READ), buf(NULL), size(-1), pos(0), own_fd(true)

    File()                                             : DEFAULTS {}
    File(int fd_, FileMode mode_, bool own_fd_ = true) : DEFAULTS { open(fd_, mode_, own_fd_); }    // -- 'fd' MUST be a file, not a socket or a pipe
    File(cchar* name, cchar* mode_)                    : DEFAULTS { open(name, mode_); }
    File(String name, String mode_)                    : DEFAULTS { open(name.c_str(), mode_.c_str()); }
   ~File() { close(); }

    #undef DEFAULTS

    void     open(int fd, FileMode mode, bool own_fd = true);    // -- Low-level open. If 'own_fd' is FALSE, descriptor will not be closed by destructor.
    void     open(cchar* name, cchar* mode);                     // -- 'fopen()' style interface.
    void     open(String name, String mode_) { open(name.c_str(), mode_.c_str()); }
    void     close();

    bool     null() const { return fd == -1; }  // -- Returns FALSE if 'open()' failed or file has been closed.
    int      releaseDescriptor();       // -- Give ownership of file descriptor to caller (destructor won't close file)

    FileMode getMode() { return mode; } // -- Are we reading or writing?
    void     setMode(FileMode m);       // -- Set mode to 'READ' or 'WRITE'.

    int      scan();                    // -- Returns a char (0..255) or 'EOF'.
    void     push(char chr);            // -- Write a character.
    bool     eof();                     // -- Have we reached end-of-file?
    void     flush();                   // -- Flush current write buffer (invalid to call in read mode).

    void     seek(uint64 pos, int whence = SEEK_SET);
    uint64   tell();
    void     rewind() { seek(0); }
        // -- Move around in the file. Will flush internal buffers if necessary. 'whence' is
        // one of: SEEK_SET, SEEK_CUR, SEEK_END

    void putChars(cchar* data, uind size);
    uind getChars(char* data, uind bytes_wanted);
        // -- Reader/Writer interface.
};


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// -- Implementation:


inline int File::releaseDescriptor()
{
    if (mode == READ)
        lseek64(fd, pos - size, SEEK_CUR);
    own_fd = false;
    return fd;
}


inline void File::setMode(FileMode m)
{
    if (m == mode) return;
    if (m == READ){
        flush();
        size = readBuf();
    }else{
        lseek64(fd, pos - size, SEEK_CUR);
        size = -1; }
    mode = m;
    pos = 0;
}


inline int File::scan()
{
    assert_debug(mode == READ);
    if (pos < size) return buf[pos++];
    if (size < File_BufSize) return EOF;
    size = readBuf();
    pos  = 0;
    if (size == 0) return EOF;
    return (uchar)buf[pos++];
}


inline void File::push(char chr)
{
    assert_debug(mode == WRITE);
    if (pos == File_BufSize){
        ssize_t n = write(fd, buf, File_BufSize);
        if (n != File_BufSize) throw Excp_WriteFailed();
        pos = 0; }
    buf[pos++] = (uchar)chr;
}


inline bool File::eof()
{
    assert(mode == READ);
    if (pos < size) return false;
    if (size < File_BufSize) return true;
    size = readBuf();
    pos  = 0;
    if (size == 0) return true;
    return false;
}


inline void File::flush()
{
    assert(mode == WRITE);
    ssize_t n = write(fd, buf, pos);
    if (n != pos) throw Excp_WriteFailed();
    pos = 0;
}


inline void File::putChars(cchar* data, uind size_)
{
    for (uind i = 0; i < size_; i++)
        push(data[i]);
}


inline uind File::getChars(char* data, uind bytes_wanted)
{
    for (uind i = 0; i < bytes_wanted; i++){
        int chr = scan();
        if (chr == EOF) return i;
        data[i] = chr;
    }
    return bytes_wanted;
}


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm


// Open a file for reading. If extension is '.gz' then file will automatically be opened in
// 'gzip' mode unless 'gzipped = false' is explicitly specified. If filename does not have
// extension '.gz' and is not found, the '.gz' is added and that file is read, if exists.
//
// Example:  InFile in("temp.txt");    -- will open 'temp.txt' if exists, otherwise 'temp.txt.gz'.
//
struct InFile : In {
    File reader;
    bool gzipped;

    bool null() const { return reader.null(); }
    typedef File InFile::* bool_type;
    operator bool_type() const { return null() ? 0 : &InFile::reader; }

    InFile(String filename, bool gzipped_) : reader(filename, "r") {
        if (!reader.null()) init(reader, gzipped_); }

    InFile(String filename) : reader(filename, "r") {
        gzipped = filename.size() > 3 && strcmp(filename.c_str() + (filename.size() - 3), ".gz") == 0;
        if (!reader.null()) init(reader, gzipped);
        if (!gzipped && reader.null()){     // -- try adding '.gz' and open in gzipped mode
            reader.open(filename + ".gz", "r");
            if (!reader.null()) 
                init(reader, true); 
            gzipped = true; 
        } 
    }

   ~InFile() { clear(); }

    void rewind() { reader.rewind(); clear(); init(reader, gzipped); }
    void close() { clear(); reader.close(); }
};


// Open a file for writing. If first constructor argument is 'append_' then data will be
// appended to existing file. If filename ends in '.gz', writing will be done in 'gzip' mode
// unless 'gzip_level = Out::NO_GZIP' is explicitly specified.
//
struct OutFile : Out {
    File writer;

    bool null() const { return writer.null(); }
    typedef File OutFile::* bool_type;
    operator bool_type() const { return null() ? 0 : &OutFile::writer; }

    OutFile(String filename) : writer(filename, "w") {
        int gzip_level = (filename.size() > 3 && strcmp(filename.c_str() + (filename.size() - 3), ".gz") == 0) ? Z_DEFAULT_COMPRESSION : NO_GZIP;
        if (!writer.null()) init(writer, gzip_level); }

    OutFile(String filename, int gzip_level) : writer(filename, "w") {
        if (!writer.null()) init(writer, gzip_level); }

    OutFile(Tag_append, String filename) : writer(filename, "a") {
        int gzip_level = (filename.size() > 3 && strcmp(filename.c_str() + (filename.size() - 3), ".gz") == 0) ? Z_DEFAULT_COMPRESSION : NO_GZIP;
        if (!writer.null()) init(writer, gzip_level); }

    OutFile(Tag_append, String filename, int gzip_level) : writer(filename, "a") {
        if (!writer.null()) init(writer, gzip_level); }

   ~OutFile() { close(); }

    void close() { finish(); writer.close(); }
};


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
}
