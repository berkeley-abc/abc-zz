//_________________________________________________________________________________________________
//|                                                                                      -- INFO --
//| Name        : Streams.ihh
//| Author(s)   : Niklas Een
//| Module      : Prelude
//| Description : Fast stream abstraction with built in 'libz' functionality.
//| 
//| (C) Copyright 2010-2014, The Regents of the University of California
//|________________________________________________________________________________________________
//|                                                                                  -- COMMENTS --
//| 
//|________________________________________________________________________________________________

namespace ZZ {
using namespace std;


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Exceptions:


struct Excp_EOF            : Excp {};
struct Excp_CannotOpen     : Excp {};
struct Excp_ReadFailed     : Excp {};
struct Excp_WriteFailed    : Excp {};
struct Excp_InZstreamError : Excp {};


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Reader:


struct Reader {
    virtual ~Reader() {}
    virtual uind getChars(char* data, uind bytes_wanted) = 0;
        // -- Returns actual number of bytes received. '0' means end-of-stream. It is legal
        // to keep asking for characters after end-of-stream is reached ('getChar()' should
        // keep returning 0).
};


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Writer:


struct Writer {
    virtual ~Writer() {}
    virtual void putChars(cchar* data, uind size) = 0;
        // -- Writes 'size' number of characters from pointer 'data'. 'size' is allowed to be zero
        // in which case 'data' should not be dereferenced.
};


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// In:


class In : public NonCopyable {
    enum{ OUTPUT_BUF_SZ  = 65536 };
    enum{ ZSTREAM_BUF_SZ = 65536 };

    char*       data;       // -- buffer that the user reads from (contains uncompressed data)
    uind        sz;
    uind        pos;
    uchar*      zbuf;       // -- buffer that the z-stream uses (if present)

    Reader*     reader;
    z_stream*   Z;

    void fillBuf();

    void zero() {
        data = NULL; zbuf = 0; sz = 0; pos = 0; reader = NULL; Z = NULL; }

public:
  //________________________________________
  //  Initialization / clearing:

    In() { zero(); }
   ~In() { clear(); }

    void init(cchar* input_data, uind size, bool gzipped = false);
    void init(Reader& reader, bool gzipped = false);
        // -- either call these on a default constructed object, or make sure to call 'clear()' first

    void clear();
        // -- returns object to default constructed state (freeing all memory, closing z-streams etc.)

  //________________________________________
  //  Main constructors:

    In(cchar* input_data, uind size, bool gzipped = false) { zero(); init(input_data, size, gzipped); }
    In(Reader& reader_, bool gzipped = false)              { zero(); init(reader_, gzipped); }

  //________________________________________
  //  Convenience constructors:

    template<template<class> class V>
    explicit In(const V<char>& input_data, bool gzipped = false) {       // -- vector must not be modified by caller while this object lives!
        zero(); init(input_data.base(), input_data.size(), gzipped); }

    template<template<class> class V>
    explicit In(const V<cchar>& input_data, bool gzipped = false) {      // -- ditto
        zero(); init(input_data.base(), input_data.size(), gzipped); }

    explicit In(cchar* c_string) {                                       // -- pointer to zero-terminated string
        zero(); init(c_string, strlen(c_string), false); }

  //________________________________________
  //  Reading:

    bool eof () const;   // -- stream reached its end?
    char scan();         // -- consume next character; must check 'eof()' before calling this method.
    char peek() const;   // -- peek at next character; must check 'eof()' before calling this method.

    uind tell() const { assert(!reader); return pos; }
        // -- For efficiency reasons, telling the position is only supported for in-memory streams.

    inline char scanS()       /*throw(Excp_EOF)*/;
    inline char peekS() const /*throw(Excp_EOF)*/;
        // -- Safe versions; check for end-of-file and throw exception if reached.

    char operator* () const { return peekS(); }      // -- shorter syntax.
    char operator++(int)    { return scanS(); }

  //________________________________________
  //  Low-level:

    Array<cchar> slice() const { assert(!reader); return ZZ::slice(data[0], data[sz]); }
    Array<char>  slice()       { assert(!reader); return ZZ::slice(data[0], data[sz]); }
        // -- Returns underlying data (only supported for in-memory streams).
};


inline bool In::eof() const
{
    return pos == sz;
}


inline char In::scan()
{
    if (!reader){
        assert_debug(pos < sz);
        return data[pos++];
    }else{
        char ret = data[pos++];
        if (pos == ~sz)
            fillBuf();
        return ret;
    }
}


inline char In::peek() const
{
    return data[pos];
}


inline char In::scanS() /*throw(Excp_EOF)*/
{
    if (eof()) throw Excp_EOF();
    return scan();
}


inline char In::peekS() const /*throw(Excp_EOF)*/
{
    if (eof()) throw Excp_EOF();
    return peek();
}


macro Array<char>  slice(In&       v) { return v.slice(); }
macro Array<cchar> slice(const In& v) { return v.slice(); }


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Out:


struct ZStreamBuf {
    z_stream strm;
    uint     sz;
    uchar    buf[4096];
};


class Out : public NonCopyable {
    Vec<char>   data;
    Writer*     writer;
    ZStreamBuf* Z;

    void initZ(int level);
    void flushZ(int libz_flush_level);
    void finalFlush();

public:
    enum { NO_GZIP = 10 };
    static const uint buf_size = 256;   // -- bigger sizes leads to slowdowns due to cache misses.

    Out()                                     : writer(NULL), Z(NULL) {}
    Out(int gzip_level)                       : writer(NULL), Z(NULL) { init(gzip_level); }
    Out(Writer& wr, int gzip_level = NO_GZIP) : writer(NULL), Z(NULL) { init(wr, gzip_level); }

    inline void init(int gzip_level = NO_GZIP);
    inline void init(Writer& wr, int gzip_level = NO_GZIP);
        // -- you can use 'Z_DEFAULT_COMPRESSION' as 'gzip_level' for normal compression, or
        // '1' for fastest, '9' for best. Anything above 9 means no GZIP compression.

    void push(char c);
        // -- Write a single character to the stream.

    void flush() { if (!Z && writer){ writer->putChars(data.base(), data.size()); data.clear(); } }
        // -- If using a writer, flush the current buffered data to it. NOTE! Flushing a compressed
        // stream does nothing! (you must call 'finish()')

    void finish(bool dealloc = false) { finalFlush(); data.clear(dealloc); }
    void finish(Vec<char>& dst) { assert(!writer); finalFlush(); data.moveTo(dst); }
        // -- Flush all remaining data and close the stream. You must NOT use this object after
        // this call unless you call 'init()' first. For in-memory buffers, you could give a
        // vector to migrate the result into. If you leave 'dealloc' to 'false', in-memory
        // buffers can quickly be reused.

    Array<const char> slice() const { assert(!writer); assert(!Z); return data.slice(); }
    Array<char>       slice()       { assert(!writer); assert(!Z); return data.slice(); }
        // -- Read the current in-memory buffer. Only available in uncompressed mode (no writer).

    Vec<char>&       vec()       { assert(!writer); assert(!Z); return data; }
    const Vec<char>& vec() const { assert(!writer); assert(!Z); return data; }
        // -- Get internal vector (only for in-memory, uncompressed mode). It is okay to modify it
        // any way you like. For instance, you can clear the vector if you using this stream as a
        // scrap buffer.

   ~Out() { finish(); }

  #if defined(_MSC_VER)     // -- get rid of incorrect compile error
    Out(const Out& other) { assert(false); }
  #endif
};


inline void Out::init(int gzip_level)
{
    assert(writer == NULL); assert(Z == NULL);
    if (gzip_level <= 9) initZ(gzip_level);
}


inline void Out::init(Writer& wr, int gzip_level)
{
    assert(writer == NULL); assert(Z == NULL);
    writer = &wr;
    data.reserve(buf_size);
    if (gzip_level <= 9) initZ(gzip_level);
}


inline void Out::push(char c)
{
    if (!writer && !Z)
        data.push(c);
    else if (Z){
        if (Z->sz == sizeof(Z->buf))
            flushZ(Z_NO_FLUSH);
        Z->buf[Z->sz++] = c;
    }else{
        if (data.size() == buf_size){
            writer->putChars(data.base(), buf_size);
            data.clear(); }
        data.pushQ(c);
    }
}


macro Array<char>       slice(Out&       v) { return v.slice(); }
macro Array<const char> slice(const Out& v) { return v.slice(); }


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
}
