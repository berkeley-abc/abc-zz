//_________________________________________________________________________________________________
//|                                                                                      -- INFO --
//| Name        : Init.ihh
//| Author(s)   : Niklas Een
//| Module      : Prelude
//| Description : Runs global initializers and finalizers.
//|
//| (C) Copyright 2010-2014, The Regents of the University of California
//|________________________________________________________________________________________________
//|                                                                                  -- COMMENTS --
//| Each ZZ program must start with a macro call 'ZZ_Init':
//|
//|     int main(int argc, char** argv)
//|     {
//|         ZZ_Init;
//|         [...]
//|     }
//|
//| This will make sure initializers and finalizers are called in the appropriate order.
//| If you prefer, you can also call 'zzInitialize()' and 'zzFinalize()' explicitly at the
//| appropriate positions (may be useful for dynamic loading of the ZZ framework).
//|
//| To register an initializer, put the following in the global scope:
//|
//|     ZZ_Initializer( <tag>, <prio> )
//|     {
//|         <your code>
//|     }
//|
//| where <tag> is a globally unique identifier (anyone will do), <prio> is the priority of
//| this initialization (lower values will be run first; values below -10000 are reserved for
//| internal ZZ use).
//|
//| To register a finalizer to be run at the end of 'main()', use 'ZZ_Finalizer( <tag>, <prio> )'.
//| Finalizers are run in reverse order; i.e. higher values are run first.
//|
//| To turn on initialization debugging, define environment variable 'ZZ_INIT_DEBUG'.
//|________________________________________________________________________________________________

namespace ZZ {
using namespace std;


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// User macros:


extern int emit_global_dependencies;    // -- activate by environment variable 'ZZ_EMIT_GLOBAL_DEP'


#define ZZ_Init ZZ::ZzInitializationWrapper zz_initialization_wrapper__;
    // -- put this first in 'main()'


#define ZZ_Initializer(TAG, PRIO)                                                     \
    void ZZ_Initializer_ ## TAG ## _function();                                       \
    GlobalInitializers ZZ_Initializer_ ## TAG ## _thunk;                              \
    struct ZZ_Initializer_ ## TAG {                                                   \
        ZZ_Initializer_ ## TAG() {                                                    \
            if (emit_global_dependencies == 0)                                        \
                emit_global_dependencies = getenv("ZZ_EMIT_GLOBAL_DEP") ? 1 : -1;     \
            if (emit_global_dependencies > 0)                                         \
                printf("ZZ_Initializer_" #TAG "\n");                                  \
            GlobalInitializers& g = ZZ_Initializer_ ## TAG ## _thunk;                 \
            g.fun     = &ZZ_Initializer_ ## TAG ## _function;                         \
            g.prio    = PRIO;                                                         \
            g.tag     = #TAG;                                                         \
            g.line_no = __LINE__;                                                     \
            g.file    = __FILE__;                                                     \
            g.next    = global_initializers;                                          \
            global_initializers = &g;                                                 \
        }                                                                             \
    };                                                                                \
    ZZ_Initializer_ ## TAG  ZZ_Initializer_ ## TAG ## _instance ___unused;            \
    void ZZ_Initializer_ ## TAG ## _function()



#define ZZ_Finalizer(TAG, PRIO)                                                       \
    void ZZ_Finalizer_ ## TAG ## _function();                                         \
    GlobalInitializers ZZ_Finalizer_ ## TAG ## _thunk;                                \
    struct ZZ_Finalizer_ ## TAG {                                                     \
        ZZ_Finalizer_ ## TAG() {                                                      \
            if (emit_global_dependencies == 0)                                        \
                emit_global_dependencies = getenv("ZZ_EMIT_GLOBAL_DEP") ? 1 : -1;     \
            if (emit_global_dependencies > 0)                                         \
                printf("ZZ_Finalizer_" #TAG "\n");                                    \
            GlobalInitializers& g = ZZ_Finalizer_ ## TAG ## _thunk;                   \
            g.fun     = &ZZ_Finalizer_ ## TAG ## _function;                           \
            g.prio    = PRIO;                                                         \
            g.tag     = #TAG;                                                         \
            g.line_no = __LINE__;                                                     \
            g.file    = __FILE__;                                                     \
            g.next    = global_finalizers;                                            \
            global_finalizers = &g;                                                   \
        }                                                                             \
    };                                                                                \
    ZZ_Finalizer_ ## TAG  ZZ_Finalizer_ ## TAG ## _instance ___unused;                \
    void ZZ_Finalizer_ ## TAG ## _function()


// These declare statements are used internally in the automatic library dependency generation:
#define ZZ_Decl_Initializer(TAG)    \
    struct ZZ_Initializer_ ## TAG { \
        ZZ_Initializer_ ## TAG();   \
    };                              \
    extern ZZ_Initializer_ ## TAG  ZZ_Initializer_ ## TAG ## _instance;


#define ZZ_Decl_Finalizer(TAG)    \
    struct ZZ_Finalizer_ ## TAG { \
        ZZ_Finalizer_ ## TAG();   \
    };                            \
    extern ZZ_Finalizer_ ## TAG  ZZ_Finalizer_ ## TAG ## _instance;


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Global data:


typedef void InitializerFunction();

struct GlobalInitializers {
    InitializerFunction* fun;
    int                  prio;      // -- smaller numbers are run first
    const char*          tag;
    int                  line_no;
    const char*          file;
    GlobalInitializers*  next;
};

extern GlobalInitializers* global_initializers;
extern GlobalInitializers* global_finalizers;


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Initialization / finalization functions:


void        zzInitialize (bool finalize = false);
inline void zzFinalize   () { zzInitialize(true); }


struct ZzInitializationWrapper {
    ZzInitializationWrapper() { zzInitialize(); }
   ~ZzInitializationWrapper() { zzFinalize(); }
};


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
}
