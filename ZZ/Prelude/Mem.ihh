//_________________________________________________________________________________________________
//|                                                                                      -- INFO --
//| Name        : Mem.ihh
//| Author(s)   : Niklas Een
//| Module      : Prelude
//| Description : Memory allocation primitives.
//| 
//| (C) Copyright 2010-2014, The Regents of the University of California
//|________________________________________________________________________________________________
//|                                                                                  -- COMMENTS --
//| 
//| The "xmalloc" family replaces regular 'malloc()'; the only difference is no need to handle
//| NULL pointer returns (either throws an exception or aborts program depending on
//| 'ZZ_NO_EXCEPTIONS').
//| 
//| The "ymalloc" family has less overhead and don't store size of allocation block (has to be
//| passed back to 'yfree()'. Used for examle by ZZ's 'Vec<T>' class.
//| 
//| There are also three allocation strategies encapsulated in the following classes:
//| 
//|   UniAlloc   -- Allocates object of uniform size. Supports freeing of individual elements (get
//|                 recycled through free-lists).
//| 
//|   StackAlloc -- Allocates object of any size in a stack-like fasion (allocates a big chunk of
//|                 memory; allocation just increases the stack pointer). Can only free all 
//|                 elements simultaneously.
//| 
//|   SlimAlloc  -- A mix of the two above strategies. Made more efficient than regular 'malloc()'
//|                 by requiring size of object to be given to 'free()'. 'ymalloc()' uses an 
//|                 instance of this class, but separate instances for separate data can give 
//|                 better memory locality (or be more efficient in a multi-threaded program).
//| 
//|________________________________________________________________________________________________

namespace ZZ {
using namespace std;


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// 'xmalloc()':


#if defined (ZZ_NO_EXCEPTIONS)
  #define mem_assert(cond) assert(cond)
#else
  struct Excp_MemOut : Excp {};
  struct Excp_MemInitFail {};
  #define mem_assert(cond) if (!(cond)) throw Excp_MemOut()
#endif


// 'xmalloc()' just wraps 'malloc()'
template<class T> macro T* xmalloc(size_t size = 1) ___malloc;
template<class T> macro T* xmalloc(size_t size) {
    T* tmp = (T*)malloc(size * sizeof(T));
    //**/printf("xmalloc: %u * %u -> %p\n", sizeof(T), size, tmp);
    mem_assert(size == 0 || tmp != NULL);
    return tmp; }


template<class T> macro T* xrealloc(T* ptr, size_t size) ___malloc;
template<class T> macro T* xrealloc(T* ptr, size_t size) {
    T* tmp = (T*)realloc((void*)ptr, size * sizeof(T));
    //**/printf("xrealloc: %p, %u * %u -> %p\n", ptr, sizeof(T), size, tmp);
    mem_assert(size == 0 || tmp != NULL);
    return tmp; }

template<class T> macro void xfree(T* ptr) {
    //**/printf("xfree: %p\n", ptr); //volatile bool cont = false; while (!cont);
    free((void*)ptr); }


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Allocation Strategies:


#include "Mem_StackAlloc.ihh"
#include "Mem_UniAlloc.ihh"
#include "Mem_SlimAlloc.ihh"


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// 'ymalloc()':


#if !defined(ZZ_NO_SMART_YMALLOC)
char* yrealloc_helper(char* ptr, size_t old_size, size_t new_size) ___malloc;
void  yfree_helper   (char* ptr, size_t size);
    // -- defined in 'Mem.icc'
#endif


template<class T> macro T* ymalloc(size_t size) ___malloc;
template<class T> macro T* ymalloc(size_t size) {
  #if defined(ZZ_NO_SMART_YMALLOC)
    return xmalloc<T>(size);
  #else
    return (T*)yrealloc_helper(NULL, 0, size * sizeof(T));
  #endif
}


template<class T> macro T* yrealloc(T* ptr, size_t old_size, size_t new_size) ___malloc;
template<class T> macro T* yrealloc(T* ptr, size_t old_size, size_t new_size) {
  #if defined(ZZ_NO_SMART_YMALLOC)
    return xrealloc(ptr, new_size);
  #else
    return (T*)yrealloc_helper((char*)ptr, old_size*sizeof(T), new_size*sizeof(T));
  #endif
}


template<class T> macro void yfree(T* ptr, size_t size) {
  #if defined(ZZ_NO_SMART_YMALLOC)
    xfree(ptr);
  #else
    yfree_helper((char*)ptr, size*sizeof(T));
  #endif
}


#if defined(ZZ_NO_SMART_YMALLOC)
macro bool ymemInShutDown() { return false; }
#else
extern SlimAlloc<char>* ymalloc_mempool;
macro bool ymemInShutDown() { return ymalloc_mempool == NULL; }
#endif


// Wrapper class for meta-programming:  
template<class T>
struct YAllocator {
//    T* alloc(size_t n) { return (T*)ymalloc(sizeof(T) * n); }
    T* alloc(size_t n) { return NULL; }
};


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
}
