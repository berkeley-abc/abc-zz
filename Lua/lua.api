### API:
###
void       (lua_close) (lua_State *L);
lua_State *(lua_newthread) (lua_State *L);
lua_CFunction (lua_atpanic) (lua_State *L, lua_CFunction panicf);
const lua_Number *(lua_version) (lua_State *L);
int   (lua_absindex) (lua_State *L, int idx);
int   (lua_gettop) (lua_State *L);
void  (lua_settop) (lua_State *L, int idx);
void  (lua_pushvalue) (lua_State *L, int idx);
void  (lua_remove) (lua_State *L, int idx);
void  (lua_insert) (lua_State *L, int idx);
void  (lua_replace) (lua_State *L, int idx);
void  (lua_copy) (lua_State *L, int fromidx, int toidx);
int   (lua_checkstack) (lua_State *L, int sz);
void  (lua_xmove) (lua_State *from, lua_State *to, int n);
int             (lua_isnumber) (lua_State *L, int idx);
int             (lua_isstring) (lua_State *L, int idx);
int             (lua_iscfunction) (lua_State *L, int idx);
int             (lua_isuserdata) (lua_State *L, int idx);
int             (lua_type) (lua_State *L, int idx);
const char     *(lua_typename_) (lua_State *L, int tp);
lua_Number      (lua_tonumberx) (lua_State *L, int idx, int *isnum);
lua_Integer     (lua_tointegerx) (lua_State *L, int idx, int *isnum);
lua_Unsigned    (lua_tounsignedx) (lua_State *L, int idx, int *isnum);
int             (lua_toboolean) (lua_State *L, int idx);
const char     *(lua_tolstring) (lua_State *L, int idx, size_t *len);
size_t          (lua_rawlen) (lua_State *L, int idx);
lua_CFunction   (lua_tocfunction) (lua_State *L, int idx);
void           *(lua_touserdata) (lua_State *L, int idx);
lua_State      *(lua_tothread) (lua_State *L, int idx);
const void     *(lua_topointer) (lua_State *L, int idx);
void  (lua_arith) (lua_State *L, int op);
int   (lua_rawequal) (lua_State *L, int idx1, int idx2);
int   (lua_compare) (lua_State *L, int idx1, int idx2, int op);
void        (lua_pushnil) (lua_State *L);
void        (lua_pushnumber) (lua_State *L, lua_Number n);
void        (lua_pushinteger) (lua_State *L, lua_Integer n);
void        (lua_pushunsigned) (lua_State *L, lua_Unsigned n);
const char *(lua_pushlstring) (lua_State *L, const char *s, size_t l);
const char *(lua_pushstring) (lua_State *L, const char *s);
void  (lua_pushcclosure) (lua_State *L, lua_CFunction fn, int n);
void  (lua_pushboolean) (lua_State *L, int b);
void  (lua_pushlightuserdata) (lua_State *L, void *p);
int   (lua_pushthread) (lua_State *L);
void  (lua_getglobal) (lua_State *L, const char *var);
void  (lua_gettable) (lua_State *L, int idx);
void  (lua_getfield) (lua_State *L, int idx, const char *k);
void  (lua_rawget) (lua_State *L, int idx);
void  (lua_rawgeti) (lua_State *L, int idx, int n);
void  (lua_rawgetp) (lua_State *L, int idx, const void *p);
void  (lua_createtable) (lua_State *L, int narr, int nrec);
void *(lua_newuserdata) (lua_State *L, size_t sz);
int   (lua_getmetatable) (lua_State *L, int objindex);
void  (lua_getuservalue) (lua_State *L, int idx);
void  (lua_setglobal) (lua_State *L, const char *var);
void  (lua_settable) (lua_State *L, int idx);
void  (lua_setfield) (lua_State *L, int idx, const char *k);
void  (lua_rawset) (lua_State *L, int idx);
void  (lua_rawseti) (lua_State *L, int idx, int n);
void  (lua_rawsetp) (lua_State *L, int idx, const void *p);
int   (lua_setmetatable) (lua_State *L, int objindex);
void  (lua_setuservalue) (lua_State *L, int idx);
void  (lua_callk) (lua_State *L, int nargs, int nresults, int ctx, lua_CFunction k);
void  (lua_call) (lua_State *L, int nargs, int nresults);
int   (lua_getctx) (lua_State *L, int *ctx);
int   (lua_pcallk) (lua_State *L, int nargs, int nresults, int errfunc, int ctx, lua_CFunction k);
int   (lua_pcall) (lua_State *L, int nargs, int nresults, int errfunc);
int   (lua_load) (lua_State *L, lua_Reader reader, void *dt, const char *chunkname, const char *mode);
int (lua_dump) (lua_State *L, lua_Writer writer, void *data);
int  (lua_yieldk) (lua_State *L, int nresults, int ctx, lua_CFunction k);
int  (lua_yield) (lua_State *L, int nresults);
int  (lua_resume) (lua_State *L, lua_State *from, int narg);
int  (lua_status) (lua_State *L);
int (lua_gc) (lua_State *L, int what, int data);
int   (lua_error) (lua_State *L);
int   (lua_next) (lua_State *L, int idx);
void  (lua_concat) (lua_State *L, int n);
void  (lua_len)    (lua_State *L, int idx);
lua_Alloc (lua_getallocf) (lua_State *L, void **ud);
void      (lua_setallocf) (lua_State *L, lua_Alloc f, void *ud);
int (lua_getstack) (lua_State *L, int level, lua_Debug *ar);
int (lua_getinfo) (lua_State *L, const char *what, lua_Debug *ar);
const char *(lua_getlocal) (lua_State *L, const lua_Debug *ar, int n);
const char *(lua_setlocal) (lua_State *L, const lua_Debug *ar, int n);
const char *(lua_getupvalue) (lua_State *L, int funcindex, int n);
const char *(lua_setupvalue) (lua_State *L, int funcindex, int n);
void *(lua_upvalueid) (lua_State *L, int fidx, int n);
void  (lua_upvaluejoin) (lua_State *L, int fidx1, int n1, int fidx2, int n2);
int (lua_sethook) (lua_State *L, lua_Hook func, int mask, int count);
lua_Hook (lua_gethook) (lua_State *L);
int (lua_gethookmask) (lua_State *L);
int (lua_gethookcount) (lua_State *L);

### Macros:
###
lua_Number  (lua_tonumber) (lua_State *L, int i);
lua_Integer  (lua_tointeger) (lua_State *L, int i);
lua_Unsigned  (lua_tounsigned) (lua_State *L, int i);
void  (lua_pop) (lua_State *L, int n);
void  (lua_newtable) (lua_State *L);
void  (lua_register_) (lua_State *L, const char * n, lua_CFunction f);
void  (lua_pushcfunction) (lua_State *L, lua_CFunction f);
bool  (lua_isfunction) (lua_State *L, int n);
bool  (lua_istable) (lua_State *L, int n);
bool  (lua_islightuserdata) (lua_State *L, int n);
bool  (lua_isnil) (lua_State *L, int n);
bool  (lua_isboolean) (lua_State *L, int n);
bool  (lua_isthread) (lua_State *L, int n);
bool  (lua_isnone) (lua_State *L, int n);
bool  (lua_isnoneornil) (lua_State *L, int n);
const char * (lua_tostring) (lua_State *L, int i);
