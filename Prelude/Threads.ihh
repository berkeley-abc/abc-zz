//_________________________________________________________________________________________________
//|                                                                                      -- INFO --
//| Name        : Threads.ihh
//| Author(s)   : Niklas Een
//| Module      : Prelude
//| Description : Shallow encapsulation of pthreads.
//| 
//| (C) Copyright 2010-2014, The Regents of the University of California
//|________________________________________________________________________________________________
//|                                                                                  -- COMMENTS --
//| ZZ_Acquire_Lock }- Requires semi-colon after use, no other macro does
//| ZZ_Release_Lock }
//|________________________________________________________________________________________________

namespace ZZ {
using namespace std;


#if defined(ZZ_PTHREADS)
//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Using pthreads:


struct ScopedMutexLock {
    pthread_mutex_t* lock;
    ScopedMutexLock(pthread_mutex_t* k) : lock(k) { pthread_mutex_lock  (lock); }
   ~ScopedMutexLock()                             { pthread_mutex_unlock(lock); }
};


#define ZZ_Local_Lock(name) \
    static pthread_mutex_t name ## _mutex_lock__; \
    ZZ_Initializer(name ## _mutex_lock__, -9990) { pthread_mutex_init(& name ## _mutex_lock__, NULL); }
#define ZZ_Global_Lock(name) \
    pthread_mutex_t name ## _mutex_lock__; \
    ZZ_Initializer(name ## _mutex_lock__, -9990) { pthread_mutex_init(& name ## _mutex_lock__, NULL); }
#define ZZ_Decl_Global_Lock(name) \
    extern pthread_mutex_t name ## _mutex_lock__;

#define ZZ_Acquire_Lock(name) pthread_mutex_lock(& name ## _mutex_lock__)
#define ZZ_Release_Lock(name) pthread_mutex_unlock(& name ## _mutex_lock__)
#define ZZ_Scoped_Lock(name) ScopedMutexLock name ## _mutex_lock__instance (& name ## _mutex_lock__);

#define ZZ_If_Pthreads(code) code
#define ZZ_If_Pthreads_Else(code, elsecode) code


#else
//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Not using pthreads, use null macros:


#define ZZ_Local_Lock(name)
#define ZZ_Global_Lock(name)
#define ZZ_Decl_Global_Lock(name)
#define ZZ_Acquire_Lock(name) ((void)0)
#define ZZ_Release_Lock(name) ((void)0)
#define ZZ_Scoped_Lock(name)

#define ZZ_If_Pthreads(code)
#define ZZ_If_Pthreads_Else(code, elsecode) elsecode


#endif
//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
}
