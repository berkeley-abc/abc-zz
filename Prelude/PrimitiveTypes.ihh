//_________________________________________________________________________________________________
//|                                                                                      -- INFO --
//| Name        : PrimitiveTypes.ihh
//| Author(s)   : Niklas Een
//| Module      : Prelude
//| Description : Defines standard names for integer types of various sizes.
//| 
//| (C) Copyright 2010-2014, The Regents of the University of California
//|________________________________________________________________________________________________
//|                                                                                  -- COMMENTS --
//| 
//| This file defines:
//| 
//|   uint, ulong, uchar, schar (signed char), cchar (const char), ind, uind
//|   {int/uint}{8,16,32}, intp, uintp
//| 
//| The types are intentionally NOT within the 'ZZ' namespace. If they were, opening that
//| namespace would lead to ambiguities with equivalent definitions in the standard
//| header files (which are common).
//| 
//| An 'ind' is an integer used for indexing into container classes (vectors, arrays etc.).
//| The default size is 32 bits to preserve memory, but if 'ZZ_BIG_MODE' is defined, 'ind's are
//| 64-bit.
//| 
//| An 'intp' is an integer the size of a pointer (same as 'intptr_t' in 'stdint.h').
//| 
//| The following symbols may also be defined:
//| 
//|   ZZ_LP64                          -- Defined if pointers are 64-bit
//|   ZZ_BYTE_ORDER_BIG_ENDIAN         -- Defined if system is big endian (else we assume 
//|                                       little endian).
//|   IND_MIN, IND_MAX, UIND_MAX       -- Limits for the index types 'ind' and 'uind'.
//|   INT64_MIN, INT64_MAX, UINT64_MAX -- Limits for 64-bit integers.
//|________________________________________________________________________________________________


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm


// Coalesce LP64 mode (64-bit pointers) defines:
#if defined(__LP64__) || defined(_LP64) || defined(__64BIT__) || defined(_WIN64)
  #define ZZ_LP64
#endif

// Define shorts for common types:
typedef signed char    schar;
typedef unsigned char  uchar;
typedef unsigned short ushort;
typedef unsigned int   uint;
typedef unsigned long  ulong;
typedef const char     cchar;

// Define 'ind' and 'uind' to be large enough to index a container (could be 32 or 64 bits
// depending on 'ZZ_BIG_MODE'):
#if defined(ZZ_BIG_MODE)
  #if !defined(ZZ_LP64)
    #error "You must not define ZZ_BIG_MODE on 32-bit systems."
  #endif
  typedef intptr_t  ind;
  typedef uintptr_t uind;
  #define IND_MIN  INT64_MIN
  #define IND_MAX  INT64_MAX
  #define UIND_MAX UINT64_MAX
#else
  typedef int  ind;
  typedef uint uind;
  #define IND_MIN  INT_MIN
  #define IND_MAX  INT_MAX
  #define UIND_MAX UINT_MAX
#endif

// Detect byte order (Linux) or else guess "big-endian":
#if defined(__BYTE_ORDER)
  #if __BYTE_ORDER != __LITTLE_ENDIAN
    #define ZZ_BYTE_ORDER_BIG_ENDIAN
  #endif
#else
  #define ZZ_BYTE_ORDER_BIG_ENDIAN
#endif


#if !defined(_MSC_VER)
  // Shorten names for convenience:
  typedef signed char   int8;
  typedef unsigned char uint8;
  typedef int16_t   int16;
  typedef uint16_t  uint16;
  typedef int32_t   int32;
  typedef uint32_t  uint32;
  typedef int64_t   int64;
  typedef uint64_t  uint64;
  typedef intptr_t  intp;
  typedef uintptr_t uintp;
  #define INTP_MIN  INTPTR_MIN
  #define INTP_MAX  INTPTR_MAX
  #define UINTP_MAX UINTPTR_MAX

#else
  typedef signed char      int8;
  typedef unsigned char    uint8;
  typedef short            int16;
  typedef unsigned short   uint16;
  typedef int              int32;
  typedef unsigned int     uint32;
  typedef __int64          int64;
  typedef unsigned __int64 uint64;

  #define INT64_MIN  (-int64(9223372036854775807)-1)
  #define INT64_MAX  (int64(9223372036854775807))
  #define UINT64_MAX (uint64(18446744073709551615))

  #if defined(LP64)
    typedef int64  intp;
    typedef uint64 uintp;
    #define INTP_MIN  INT64_MIN
    #define INTP_MAX  INT64_MAX
    #define UINTP_MAX UINT64_MAX
  #else
    typedef int32  intp;
    typedef uint32 uintp;
    #define INTP_MIN  INT_MIN
    #define INTP_MAX  INT_MAX
    #define UINTP_MAX UINT_MAX
  #endif
#endif


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
