//_________________________________________________________________________________________________
//|                                                                                      -- INFO --
//| Name        : Resources.ihh
//| Author(s)   : Niklas Een
//| Module      : Prelude
//| Description : Inspect memory consumption, CPU time used etc.
//|
//| (C) Copyright 2010-2014, The Regents of the University of California
//|________________________________________________________________________________________________
//|                                                                                  -- COMMENTS --
//|
//|________________________________________________________________________________________________

namespace ZZ {
using namespace std;


#if !defined(_MSC_VER)
//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Non-windows:


extern double realTime_T0;


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#if !defined(__APPLE__)


#if !defined(CLOCK_MONOTONIC)
#define CLOCK_MONOTONIC CLOCK_REALTIME
#endif


macro double realTime()
{
    struct timespec t;
    clock_gettime(CLOCK_MONOTONIC, &t);
    return ((double)t.tv_sec + (double)t.tv_nsec / 1000000000) - realTime_T0;
}


macro uint64 realTimeAbs()  // -- absolute time in nano-seconds
{
    struct timespec t;
    clock_gettime(CLOCK_MONOTONIC, &t);
    return uint64(t.tv_sec) * 1000000000 + uint64(t.tv_nsec);
}


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#else


}
#include <mach/mach_time.h>
namespace ZZ{

extern double realtime_conversion;

macro double realTime() {
    return mach_absolute_time() * realtime_conversion - realTime_T0; }

macro uint64 realTimeAbs() {  // -- absolute time in nano-seconds
    return uint64(mach_absolute_time() * realtime_conversion * 1e9); }


#endif
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


macro double cpuTime()
{
    struct rusage ru;
    getrusage(RUSAGE_SELF, &ru);
    return (double)ru.ru_utime.tv_sec + (double)ru.ru_utime.tv_usec / 1000000;
}


#else
//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Windows:


extern uint64 realTime_T0;
extern double realTime_freq;


macro double realTime()
{
    LARGE_INTEGER t;
    bool ok = QueryPerformanceCounter(&t); assert(ok);

    return ((uint64(t.LowPart) | (uint64(t.HighPart) << 32)) - realTime_T0) * realTime_freq;
}


macro uint64 realTimeAbs()  // -- absolute time in nano-seconds
{
    LARGE_INTEGER t;
    bool ok = QueryPerformanceCounter(&t); assert(ok);

    return uint64((uint64(t.LowPart) | (uint64(t.HighPart) << 32)) * realTime_freq * 1000000000);
}


macro double cpuTime()
{
    DWORD  pid  = GetCurrentProcessId();
    HANDLE proc = OpenProcess(PROCESS_QUERY_INFORMATION, FALSE, pid); assert(proc);

    FILETIME T_create, T_exit, T_kernel, T_user;
    bool ok = GetProcessTimes(proc, &T_create, &T_exit, &T_kernel, &T_user); assert(ok);

    CloseHandle(proc);
    return (uint64(T_user.dwLowDateTime) | (uint64(T_user.dwHighDateTime) << 32)) / 10000000.0;
}


#endif
//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Common:


uint64 memUsed();       // -- peak memory usage
uint64 memUsedNow();    // -- current memory usage
uint64 memPhysical();   // -- total amount of RAM
uint   numCpus();       // -- cores/CPUs available

extern uint64 mem_physical;
extern uint   num_cpus;
    // -- On first call, the corresponding functions above will determine and initialize these
    // values. However, you can set them yourself, in which case that value will be returned.


// To "clock" is to measure the time between two calls (to either 'cpuClock()' or 'realClock()).
extern double cpu_clock_last;
extern double real_clock_last;

macro double cpuClock () { double t = cpu_clock_last ; cpu_clock_last  = cpuTime (); return cpu_clock_last  - t; }
macro double realClock() { double t = real_clock_last; real_clock_last = realTime(); return real_clock_last - t; }


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
}
