//_________________________________________________________________________________________________
//|                                                                                      -- INFO --
//| Name        : File.icc
//| Author(s)   : Niklas Een
//| Module      : Prelude
//| Description : An efficient, low-level, buffered file abstraction.
//|
//| (C) Copyright 2010-2014, The Regents of the University of California
//|________________________________________________________________________________________________
//|                                                                                  -- COMMENTS --
//|
//|________________________________________________________________________________________________


namespace ZZ {
using namespace std;


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm


void File::open(int file_descr, FileMode m, bool own)
{
    if (fd != -1) ::close(fd);
    fd     = file_descr;
    mode   = m;
    own_fd = own;
    pos    = 0;
    buf    = xmalloc<uchar>(File_BufSize);
    if (mode == READ){
        size = readBuf();
        if (size < 0) close();
    }else
        size = -1;
}


void File::open(cchar* name, cchar* mode_)
{
    if (fd != -1) ::close(fd);
    bool    has_r = strchr(mode_, 'r') != NULL;     // read-only
    bool    has_w = strchr(mode_, 'w') != NULL;     // write-only
    bool    has_a = strchr(mode_, 'a') != NULL;     // append
    bool    has_p = strchr(mode_, '+') != NULL;     // read and write
    bool    has_x = strchr(mode_, 'x') != NULL;     // exclusive mode

    assert(!(has_r && has_w));
    assert(has_r || has_w || has_a);

    // Find out the opening mode:
    int mask = 0;
    if      (has_p) mask |= O_RDWR;
    else if (has_r) mask |= O_RDONLY;
    else            mask |= O_WRONLY;

    if (!has_r) mask |= O_CREAT;
    if (has_w)  mask |= O_TRUNC;
    if (has_x)  mask |= O_EXCL;

  #if !defined(_MSC_VER)
    fd = open64(name, mask, S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH);
  #else
    fd = open64(name, mask | O_BINARY, _S_IREAD | _S_IWRITE);
  #endif

    if (fd != -1){
        mode   = has_r ? READ : WRITE;
        own_fd = true;
        pos    = 0;
        if (has_a) lseek64(fd, 0, SEEK_END);
        buf    = xmalloc<uchar>(File_BufSize);
        if (mode == READ){
            size = readBuf();
            if (size < 0) close();
        }else
            size = -1;
    }
}


void File::close()
{
    if (fd == -1) return;
    if (mode == WRITE)
        flush();
    xfree(buf);
    buf = NULL;
    if (own_fd)
        ::close(fd);
    fd = -1;
}


void File::seek(uint64 file_pos, int whence)
{
    if (mode == WRITE){
        flush();
        pos = 0;
        assert(fd != -1);
        lseek64(fd, file_pos, whence);
    }else{
        if (whence == SEEK_CUR) lseek64(fd, file_pos - (size - pos), SEEK_CUR);
        else                    lseek64(fd, file_pos, whence);
        size = readBuf();
        pos = 0;
    }
}


uint64 File::tell()
{
    assert(fd != -1);
    if (mode == WRITE) return lseek64(fd, 0, SEEK_CUR) + pos;
    else               return lseek64(fd, 0, SEEK_CUR) - (size - pos);
}


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
}
