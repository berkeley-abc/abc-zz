//_________________________________________________________________________________________________
//|                                                                                      -- INFO --
//| Name        : Hash.hh
//| Author(s)   : Niklas Een
//| Module      : Prelude
//| Description : Hash primes and default hash functions.
//| 
//| (C) Copyright 2010-2014, The Regents of the University of California
//|________________________________________________________________________________________________
//|                                                                                  -- COMMENTS --
//| 
//| The hash maps of ZZ will take a class of the following type as template argument:
//| 
//|     struct MyHash {
//|         uint64 hash (T key)          const;
//|         bool   equal(T key1, T key2) const;
//|     };
//| 
//| If none is provided, the argument defaults to 'ZZ::Hash_default<T>' for the key type 'T'. You
//| can specialize this template class further by defining:
//| 
//|     template <> struct Hash_default<K> { ... };                 -- inside namespace 'ZZ'
//| 
//| The default will call the template function 'hash_<T>(x)' for hashing (which in turn defaults
//| to casting to 'uint64'); and call the template function 'equal_<T>(x,y)' for equality test
//| (which in turn defaults to the operator '==' ). It is probably more convenient to specialize
//| these template functions than to specialize the 'Hash_default' directly since '==' often do the
//| right thing (can be left out). Note the extra underscores to avoid name clashes:
//| 
//|     template<> inline uint64 hash_<K>(K sid) { return ...; }    -- inside namespace 'ZZ'
//| 
//| The choice to use 'uint64' rather than 'uint32_t' is necessary in ZZ_BIG_MODE. For non-big
//| mode, we could have used 32-bit integers, but then behavior would not be deterministic.
//| If speed is super-critical, use another hash implementation. This hash is good enough for
//| most purposes (such as parsing).
//|________________________________________________________________________________________________

namespace ZZ {
using namespace std;


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Prime numbers for hashing:


extern uint64 prime_twins[140];


// Usage: '(prime_ < 1000)' gives the largest prime smaller than 1000.
//        '(prime_ > 1000)' gives the smallest prime larger than 1000.
// All primes are twin (add '2' and you get another prime). Useful for double hashing.

static const struct PrimeTwin_t {} prime_ = PrimeTwin_t();

macro uint64 operator < (PrimeTwin_t, uint64 n) {
    for (uint i = elemsof(prime_twins); i > 0;){ i--;
        if (prime_twins[i] < n) return prime_twins[i]; }
    assert(false); return 42; }

macro uint64 operator > (PrimeTwin_t, uint64 n) {
    for (uint i = 0; i < elemsof(prime_twins); i++){
        if (prime_twins[i] > n) return prime_twins[i]; }
    assert(false); return 42; }

macro uint64 operator <= (PrimeTwin_t, uint64 n) { return prime_ < (n+1); }
macro uint64 operator >= (PrimeTwin_t, uint64 n) { return (n == 0) ? prime_twins[0] : prime_ > (n-1); }


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// -- Default 'Hash' template class:


template<class T> macro uint64 hash_ (const T& x);
template<class T> macro bool   equal_(const T& x, const T& y);

template<class K> struct Hash_default {
    uint64 hash (const K& key)                 const { return ZZ::hash_(key); }
    bool   equal(const K& key1, const K& key2) const { return ZZ::equal_(key1, key2); }
};


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Default hash functions / template class:


//=================================================================================================
// -- Default hash/equal:


template<class T>
macro uint64 hash_(const T& x) { return uint64(x); }
    // -- This should handle the various integer types (by casting them to 'uint64') as well as
    // pointers. However, if this cast is defined for your type 'T', but does not do the right
    // thing, you must be careful to specialize this template function (or you will silently get a
    // bug).

template<class T>
macro bool equal_(const T& x, const T& y) { return x == y; }
    // -- This is almost always the right thing to do (exception below: 'char*' where you want
    // 'strcmp()'.


//=================================================================================================
// -- Float types:


template<> fts_macro uint64 hash_<float>(const float& x) {
    union { float f; uint32 u; } key;
    key.f = x;
    return key.u; }

template<> fts_macro uint64 hash_<double>(const double& x) {
    union { float f; uint64 u; } key;
    key.f = x;
    return key.u; }


//=================================================================================================
// -- Zero-terminated strings:


template<> fts_macro uint64 hash_<cchar*>(cchar* const& text) {
    uint64 v = 0;
    cchar* x = text;
    for (;*x; x++)
        v = *x + (v << 6) + (v << 16) - v;
    return v; }

template<> fts_macro bool equal_<cchar*>(cchar* const& x, cchar* const& y) {
    return strcmp(x, y) == 0; }


template<> fts_macro uint64 hash_<char*>(char* const& x) {
    return hash_((cchar*)x); }

template<> fts_macro bool equal_<char*>(char* const& x, char* const& y) {
    return equal_((cchar*)x, (cchar*)y); }


//=================================================================================================
// -- Vector-like types:


template<template<class> class V, class T>
struct Hash_default<V<T> > {
    uint64 hash (const V<T>& key)                    const { return vecHash(key); }
    bool   equal(const V<T>& key1, const V<T>& key2) const { return vecEqual(key1, key2); }
};


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Function syntax for calling the default hash/equal functions:


template<class T>
macro uint64 defaultHash(const T& x) {
    return Hash_default<T>().hash(x); }

template<class T>
macro bool defaultEqual(const T& x, const T& y) {
    return Hash_default<T>().equal(x, y); }


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
}
