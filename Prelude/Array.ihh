//_________________________________________________________________________________________________
//|                                                                                      -- INFO --
//| Name        : Array.ihh
//| Author(s)   : Niklas Een
//| Module      : Prelude
//| Description : An 'Array<T>' is a 'T'-pointer plus an unsigned integer size. 
//| 
//| (C) Copyright 2010-2012, The Regents of the University of California
//|________________________________________________________________________________________________
//|                                                                                  -- COMMENTS --
//| 
//| An array is just a pair '(data, size)' without much abstraction. It is meant to be a wrapper
//| for regular C-arrays and slices of memory that couples the pointer with the size of the data it
//| points to. You are allowed to modify the fields 'data' and 'sz' (size) directly. The null-array 
//| is represented by having 'sz == -1'.
//| 
//| Note that a constant array can still have its elements changed. It's only the pointer and the 
//| size that is constant. If you want the element to be constant, use 'Array<const T>' (compare
//| 'const char*' (pointer to a constant) vs. 'char *const' (constant pointe)).
//|________________________________________________________________________________________________

namespace ZZ {
using namespace std;


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Helper type for convenient access to last elements:


struct ReverseIndex {
    uind off;       // -- this amount will be subtracted from the 'size()' of a vector object
    ReverseIndex(uind off_) : off(off_) {}

    ReverseIndex operator-(uind v) const { return ReverseIndex(off + v); }
    ReverseIndex operator+(uind v) const { return ReverseIndex(off - v); }
};

static const ReverseIndex LAST(1);
static const ReverseIndex END(0);


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm


template<class T>
struct Array {
  //________________________________________
  //  Representation:

    // The pair:
    T*      data;
    uind    sz;

    // Expose element type:
    typedef T Elem;

  //________________________________________
  //  Constructors etc:

    // Plain: 
    Array() : data(NULL), sz(UIND_MAX) {}
    Array(T* data_, uind sz_) : data(data_), sz(sz_) {}
    Array(const Array& other) : data(other.data), sz(other.sz) {}
    Array(Tag_empty) : data(NULL), sz(0) {}
        // -- use factory functions below for more interesting ways to construct an array.

    // Construct used for 'Str' (='Array<cchar>') only:
    Array(cchar* cstr) {
        cchar* p = cstr;
        while (*p != 0) ++p;
        data = cstr;
        sz = p - cstr; }

    // Return to null state:
    void mkNull() { data = NULL; sz = UIND_MAX; }
    T*   release() { T* ret = data; mkNull(); return ret; }

    // Allow implicit cast from 'T' to 'const T':
    operator Array<const T>() const { return *(Array<const T>*)this; }

  //________________________________________
  //  Predicates:

    bool null() const { return sz == UIND_MAX; }

    typedef uind Array<T>::*bool_type;
    operator bool_type() const { return null() ? 0 : &Array<T>::sz; }

  //________________________________________
  //  Vector-style interface:

    uind     size      ()               const { return sz; }
    T&       operator[](uind i)         const { assert_debug(i <= sz); return data[i]; }    // -- intentionally allow for one-beyond-last addressing
    T&       operator[](ReverseIndex r) const { uind i = this->sz - r.off; assert_debug(i <= sz); return data[i]; }

    T&       end_() const { return data[sz]; }
    T&       last() const { return data[sz-1]; }
    void     pop ()       { sz--; }
    void     shrinkTo(uind size) { if (sz > size) sz = size; }   // (will do nothing if already smaller)

    T*       base() const { return data; }

    Array<T> slice(uind start = 0)       const { return Array<T>(&data[start], sz - start); }
    Array<T> slice(uind start, uind end) const { return Array<T>(&data[start], end - start); }

  #if (__cplusplus == 201103L)
    const T* end   (uind i = 0) const { return &this->data[this->sz-i]; }
    T*       end   (uind i = 0)       { return &this->data[this->sz-i]; }
    const T* begin () const           { return &this->data[0]; }
    T*       begin ()                 { return &this->data[0]; }
  #endif

  //________________________________________
  //  Slice parsing interface:

    const T& operator* () const { return data[0]; }
    void     operator++(int)    { data++; sz--; }

  //________________________________________
  //  Shallow comparison:

    bool operator==(const Array<const T>& other) const { return data == other.data && sz == other.sz; }
};


template<class T>
struct Hash_default<Array<T> > {
    uint64 hash (const Array<T>& key) const {
        return key.null() ? 0 : vecHash(key); }
    bool equal(const Array<T>& key1, const Array<T>& key2) const {
        return (key1 == key2) || (!key1.null() && !key2.null() && vecEqual(key1, key2)); }
};


//=================================================================================================
// Factory functions:


template<class T>
macro Array<T> Array_new(T* data, uind sz)
{
    return Array<T>(data, sz);
}


// Allocate and initialize (by default constructor) an array of specified size. Note that:
//
//   - 'ymalloc()' is used, so the size must not be changed if you later dispose the array.
//
//   - If 'T' is a built in type like 'int', the default constructor does nothing, meaning
//     memory is left uninitialized. Consider using 'Array_alloc()' with two arguments instead.
//
template<class T>
macro Array<T> Array_alloc(uind size)
{
    Array<T> tmp;
    tmp.data = ymalloc<T>(size);
    tmp.sz   = size;
    for (uind i = 0; i < size; i++)
        new (&tmp.data[i]) T;
    return tmp;
}


// Allocate and fill (by copy constructor) an array of specified size. Again 'ymalloc()' is used.
template<class T>
macro Array<T> Array_alloc(uind size, const T& pad)
{
    Array<T> tmp;
    tmp.data = ymalloc<T>(size);
    tmp.sz   = size;
    for (uind i = 0; i < size; i++)
        new (&tmp.data[i]) T(pad);
    return tmp;
}


// Copy memory slice '[start,end[' to an array. Again 'ymalloc()' is used.
template<class T>
macro Array<T> Array_copy(const T& start, const T& end)
{
    Array<T> tmp;
    tmp.sz = &end - &start;
    tmp.data = ymalloc<T>(tmp.sz);
    for (uind i = 0; i < tmp.sz; i++)
        new (&tmp.data[i]) T((&start)[i]);
    return tmp;
}


template<class T, class ALLOC>
macro Array<T> Array_copy(const T& start, const T& end, ALLOC& mem)
{
    Array<T> tmp;
    tmp.sz = &end - &start;
    size_t quanta = sizeof(typename ALLOC::Elem);
    size_t alloc_sz = (tmp.sz * sizeof(T) + quanta - 1) / quanta;
    tmp.data = (T*)mem.alloc(alloc_sz);
    for (uind i = 0; i < tmp.sz; i++)
        new (&tmp.data[i]) T((&start)[i]);
    return tmp;
}


// Copy vector like object:
#if 0
template<template<class> class V, class T>
macro Array<T> Array_copy(const V<const T>& other)
{
    return Array_copy(other[0], other.end_());
}
#endif

template<template<class> class V, class T>
macro Array<T> Array_copy(const V<T>& other)
{
    return Array_copy(other[0], other.end_());
}


template<template<class> class V, class T, class ALLOC>
macro Array<T> Array_copy(const V<T>& other, ALLOC& mem)
{
    return Array_copy(other[0], other.end_(), mem);
}


// Dispose an array (with 'yfree') and return it to the null-state.
template<class T>
macro void dispose(Array<T>& arr)
{
    if (!arr.null()){
        yfree(arr.data, arr.sz);
        arr.mkNull();
    }
}


// Dispose an array (with 'mem.free') and return it to the null-state.
template<class T>
macro void dispose(Array<T>& arr, SlimAlloc<T>& mem)
{
    if (!arr.null()){
        mem.free(arr.data, arr.sz);
        arr.mkNull();
    }
}


// Cast a slice of memory into an array (this function gets a short name because it is used pervasively)
template<class T>
macro const Array<T> slice(T& start, T& end)
{
    return Array<T>(&start, &end - &start);
}


// Same as 'slice' but take a pointer and termination character ('z' for zero) as inputs instead.
// Primarily intended for zero-terminated char-pointers.
template<class T>
macro const Array<T> slize(T* start, T terminator = T())
{
    T* p = start;
    while (*p != terminator) ++p;
    return Array<T>(start, p - start);
}


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// 'Str' type:


// A non-zero terminated string type (instead store pointer + length). Intended for static
// strings, hence the 'const char' type.
typedef Array<cchar> Str;
const Str Str_NULL;
const Str Str_EMPTY(empty_);


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
}
