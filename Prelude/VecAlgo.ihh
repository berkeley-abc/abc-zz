//_________________________________________________________________________________________________
//|                                                                                      -- INFO --
//| Name        : VecAlgo.ihh
//| Author(s)   : Niklas Een
//| Module      : Prelude
//| Description : Some basic algorithms for vector-like types.
//| 
//| (C) Copyright 2010-2012, The Regents of the University of California
//|________________________________________________________________________________________________
//|                                                                                  -- COMMENTS --
//|________________________________________________________________________________________________

namespace ZZ {
using namespace std;


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Standard functions on vector-like classes:


template<class V, class T>
macro uind search(const V& v, const T& x) { // -- returns 'UIND_MAX' if element does not exist
    for (uind i = 0; i < v.size(); i++)
        if (v[i] == x)
            return i;
    return UIND_MAX; }

template<class V, class T>
macro uind find(const V& v, const T& x) {   // -- element MUST exist
    for (uind i = 0; i < v.size(); i++)
        if (v[i] == x)
            return i;
    assert(false); /*please compiler:*/return 0; }

template<class V, class T>
macro bool has(const V& v, const T& x) {
    return search(v, x) != UIND_MAX; }

template<class V>
macro void reverse(V& v) {
    if (v.size() == 0) return;
    for (uind i = 0, j = v.size()-1; i < j; i++, j--)
        swp(v[i], v[j]); }

template<class V, class W>
macro void append(V& v, W& w) {            // -- append 'w' to 'v' (allows for 'v == w')
    uind sz = w.size();
    for (uind i = 0; i < sz; i++)
        v.push(w[i]); }

template<class V, class W>
macro void vecSet(V& v, W& w) {            // -- clear + append
    v.clear();
    append(v, w); }

template<class V, class W>
macro bool vecEqual(const V& v, const W& w) {
    if (v.size() != w.size()) return false;
    for (uind i = 0; i < v.size(); i++)
        if (v[i] != w[i]) return false;
    return true; }

template<class V, class W>
macro bool vecHasPrefix(const V& full, const W& prefix) {
    if (prefix.size() > full.size()) return false;
    for (uind i = 0; i < prefix.size(); i++)
        if (full[i] != prefix[i]) return false;
    return true; }

template<class V, class W>
macro bool vecHasSuffix(const V& full, const W& suffix) {
    if (suffix.size() > full.size()) return false;
    for (uind i = 1; i <= suffix.size(); i++)
        if (full[full.size() - i] != suffix[suffix.size() - i]) return false;
    return true; }

template<template<class> class V, class T>
macro uint64 vecHash(const V<T>& v) {
    uint64 ret = v.size() * 8398271422251974309ull;
    for (uind i = 0; i < v.size(); i++){
        uint64 h = defaultHash(v[i]);
        ret = ret * 12597407133377961469ull + h; }
    return ret; }

template<template<class> class V>   // -- faster hash for vector of characters (important special case)
macro uint64 vecHash(const V<char>& text) {
    uint64 v = 0;
    for (uind i = 0; i < text.size(); i++)
        v = uint64(text[i]) + (v << 6) + (v << 16) - v;
    return v; }

template<template<class> class V>   // -- ditto
macro uint64 vecHash(const V<cchar>& text) {
    uint64 v = 0;
    for (uind i = 0; i < text.size(); i++)
        v = uint64(text[i]) + (v << 6) + (v << 16) - v;
    return v; }

template<class V, class W>
macro bool vecLessThan(const V& v, const W& w) {
    for (uind i = 0;; i++){
        if (w.size() == i) return false;
        if (v.size() == i) return true;
        if (v[i] > w[i]) return false;
        if (v[i] < w[i]) return true;
    } }

template<class V, class P>
macro void filter(V& v, P& pred) {         // -- 'pred' tells what elements to KEEP
    uind j = 0;
    for (uind i = 0; i < v.size(); i++)
        if (pred(v[i]))
            mov(v[i], v[j++]);
//          v[j++] = v[i];
    while (v.size() > j)
        v.pop(); }

template<class V, class P>
macro void filterOut(V& v, P& pred) {      // -- 'pred' tells what elements to REMOVE
    uind j = 0;
    for (uind i = 0; i < v.size(); i++)
        if (!pred(v[i]))
            mov(v[i], v[j++]);
//          v[j++] = v[i];
    while (v.size() > j)
        v.pop(); }

template<class V, class F>
macro void forAll(V& v, F& fun) {
    for (uind i = 0; i < v.size(); i++)
        fun(v[i]); }

template<class T, class F>
macro void forAll(Array<T> v, F& fun) {
    for (uind i = 0; i < v.size(); i++)
        fun(v[i]); }

template<class V, class T>
macro void remove(V& v, const T& x) {      // -- remove an element and put the last element of 'v' in its place
    v[find(v, x)] = v[v.size()-1];
    v.pop(); }

template<class V, class T>
macro void pullOut(V& v, const T& x) {     // -- pull out an element (first occurance only), shifting the tail to towards the head
    for (uind i = find(v, x); i < v.size()-1; i++)
        v[i] = v[i+1];
    v.pop(); }

template<class V, class T>
macro void revPullOut(V& v, T x) {         // -- same as 'pullOut()' but take LAST element (more efficient)
    assert(v.size() > 0);
    uind i = v.size()-1;
    T   tmp = v[i];
    v.pop();
    for(;;){
        if (tmp == x) return;
        assert(i != 0);
        i--;
        swp(tmp, v[i]);
    } }

template<class V, class W>
macro void vecCopy(const V& src, W& dst) {
    dst.clear();
    for (uind i = 0; i < src.size(); i++)
        dst.push(src[i]);
}


// To initialize an empty vector 'v' to '{1, 2, 3}', do: 'pusher(v), 1, 2, 3'
template<class V, class T> struct Pusher {
    V& v;
    Pusher<V,T> operator,(const T& t) const { v.push(t); return *this; }
    Pusher(V& v_) : v(v_) {}
};

template<template<class> class V, class T>
macro Pusher<V<T>,T> pusher(V<T>& v) {
    return Pusher<V<T>,T>(v); }


// Even more handy syntax for type 'Vec', simply do: 'vec += 10, 20, 30'
template<class T, class S>
macro Pusher<Vec<T>,T> operator+=(Vec<T>& vec, const S& elem) {
    return Pusher<Vec<T>,T>(vec), elem; }

template<class T, class S>
macro void operator+=(Vec<T>& vec, const Vec<S>& vec2) {
    append(vec, vec2); }


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Common predicates:


template<class V>
macro bool isNull(const V& v) {
    return v.null(); }

template<class V>
macro bool isEmpty(const V& v) {
    return v.size() == 0; }

template<class V>
macro bool isUnit(const V& v) {
    return v.size() == 1; }

template<class T, T t_const>
macro bool isEqualTo(T val) {
    return val == t_const; }


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
}
