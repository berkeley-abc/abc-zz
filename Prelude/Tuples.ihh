//_________________________________________________________________________________________________
//|                                                                                      -- INFO --
//| Name        : Tuples.ihh
//| Author(s)   : Niklas Een
//| Module      : Prelude
//| Description : 
//| 
//| (C) Copyright 2010-2014, The Regents of the University of California
//|________________________________________________________________________________________________
//|                                                                                  -- COMMENTS --
//| 
//| The content of this file was automatically generated from 'ZZ/Prelude/Aux/GenTuples.C' by:
//| 
//|     g++ GenTuples.C -o gen_tuples && gen_tuples && rm gen_tuples
//|     
//| Pairs, triplets and quadruplets are supported. Fields are named: fst, snd, trd, fth.
//| Factory functions allow creating tuples without explicitly stating types:
//| 
//|     make_tuple(12, "niklas");      vs.    Pair<int,const char*>(12, "niklas")
//| 
//| Variables can be temporary wrapped as a tuple l-value to receiving return values:
//|
//|     l_tuple(x, y) = myFunc(...);
//|________________________________________________________________________________________________

namespace ZZ {
using namespace std;


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Pair:


template<class Fst_, class Snd_>
struct Pair {
    typedef Fst_ Fst;
    typedef Snd_ Snd;
    enum { size = 2 };

    Fst fst;
    Snd snd;

    Pair() {}
    Pair(const Fst& fst_, const Snd& snd_) : fst(fst_), snd(snd_) {}

    template<class FstCompat, class SndCompat>
    Pair(const Pair<FstCompat, SndCompat>& tuple) : fst(tuple.fst), snd(tuple.snd) {}

    void split(Fst& out_fst, Snd& out_snd) { out_fst = fst; out_snd = snd; }

};


template<class Fst, class Snd>
inline bool operator==(const Pair<Fst, Snd>& v0, const Pair<Fst, Snd>& v1) {
    return (v0.fst == v1.fst) && (v0.snd == v1.snd); }

template<class Fst, class Snd>
inline bool operator<(const Pair<Fst, Snd>& v0, const Pair<Fst, Snd>& v1) {
    return v0.fst < v1.fst || (!(v1.fst < v0.fst) && (v0.snd < v1.snd)); }

template<class Fst, class Snd>
inline Pair<Fst, Snd> make_tuple(const Fst& fst, const Snd& snd) {
    return Pair<Fst, Snd>(fst, snd); }


template<class Fst, class Snd>
struct Hash_default<Pair<Fst, Snd> > {
    uint64 hash(const Pair<Fst, Snd >& v) const {
        uint64 hfst = defaultHash(v.fst);
        uint64 hsnd = defaultHash(v.snd);
        return hfst ^ ((hsnd << 32) | (hsnd >> 32)); }
    bool equal(const Pair<Fst, Snd>& v0, const Pair<Fst, Snd>& v1) const {
        return v0 == v1; }
};


template<class Fst, class Snd>
struct LPair {
    Fst& fst;
    Snd& snd;

    LPair(Fst& fst_, Snd& snd_) : fst(fst_), snd(snd_) {}
    LPair& operator=(const Pair<Fst, Snd>& p) { fst = p.fst; snd = p.snd; return *this; }
};


template<class Fst, class Snd>
inline LPair<Fst, Snd> l_tuple(Fst& fst, Snd& snd) {
    return LPair<Fst, Snd>(fst, snd); }


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Trip:


template<class Fst_, class Snd_, class Trd_>
struct Trip {
    typedef Fst_ Fst;
    typedef Snd_ Snd;
    typedef Trd_ Trd;
    enum { size = 3 };

    Fst fst;
    Snd snd;
    Trd trd;

    Trip() {}
    Trip(const Fst& fst_, const Snd& snd_, const Trd& trd_) : fst(fst_), snd(snd_), trd(trd_) {}

    template<class FstCompat, class SndCompat, class TrdCompat>
    Trip(const Trip<FstCompat, SndCompat, TrdCompat>& tuple) : fst(tuple.fst), snd(tuple.snd), trd(tuple.trd) {}

    void split(Fst& out_fst, Snd& out_snd, Trd& out_trd) { out_fst = fst; out_snd = snd; out_trd = trd; }

};


template<class Fst, class Snd, class Trd>
inline bool operator==(const Trip<Fst, Snd, Trd>& v0, const Trip<Fst, Snd, Trd>& v1) {
    return (v0.fst == v1.fst) && (v0.snd == v1.snd) && (v0.trd == v1.trd); }

template<class Fst, class Snd, class Trd>
inline bool operator<(const Trip<Fst, Snd, Trd>& v0, const Trip<Fst, Snd, Trd>& v1) {
    return v0.fst < v1.fst || (!(v1.fst < v0.fst) && (v0.snd < v1.snd || (!(v1.snd < v0.snd) && (v0.trd < v1.trd)))); }

template<class Fst, class Snd, class Trd>
inline Trip<Fst, Snd, Trd> make_tuple(const Fst& fst, const Snd& snd, const Trd& trd) {
    return Trip<Fst, Snd, Trd>(fst, snd, trd); }


template<class Fst, class Snd, class Trd>
struct Hash_default<Trip<Fst, Snd, Trd> > {
    uint64 hash(const Trip<Fst, Snd, Trd >& v) const {
        uint64 hfst = defaultHash(v.fst);
        uint64 hsnd = defaultHash(v.snd);
        uint64 htrd = defaultHash(v.trd);
        return hfst ^ ((hsnd << 21) | (hsnd >> 43)) ^ ((htrd << 42) | (htrd >> 22)); }
    bool equal(const Trip<Fst, Snd, Trd>& v0, const Trip<Fst, Snd, Trd>& v1) const {
        return v0 == v1; }
};


template<class Fst, class Snd, class Trd>
struct LTrip {
    Fst& fst;
    Snd& snd;
    Trd& trd;

    LTrip(Fst& fst_, Snd& snd_, Trd& trd_) : fst(fst_), snd(snd_), trd(trd_) {}
    LTrip& operator=(const Trip<Fst, Snd, Trd>& p) { fst = p.fst; snd = p.snd; trd = p.trd; return *this; }
};


template<class Fst, class Snd, class Trd>
inline LTrip<Fst, Snd, Trd> l_tuple(Fst& fst, Snd& snd, Trd& trd) {
    return LTrip<Fst, Snd, Trd>(fst, snd, trd); }


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Quad:


template<class Fst_, class Snd_, class Trd_, class Fth_>
struct Quad {
    typedef Fst_ Fst;
    typedef Snd_ Snd;
    typedef Trd_ Trd;
    typedef Fth_ Fth;
    enum { size = 4 };

    Fst fst;
    Snd snd;
    Trd trd;
    Fth fth;

    Quad() {}
    Quad(const Fst& fst_, const Snd& snd_, const Trd& trd_, const Fth& fth_) : fst(fst_), snd(snd_), trd(trd_), fth(fth_) {}

    template<class FstCompat, class SndCompat, class TrdCompat, class FthCompat>
    Quad(const Quad<FstCompat, SndCompat, TrdCompat, FthCompat>& tuple) : fst(tuple.fst), snd(tuple.snd), trd(tuple.trd), fth(tuple.fth) {}

    void split(Fst& out_fst, Snd& out_snd, Trd& out_trd, Fth& out_fth) { out_fst = fst; out_snd = snd; out_trd = trd; out_fth = fth; }

};


template<class Fst, class Snd, class Trd, class Fth>
inline bool operator==(const Quad<Fst, Snd, Trd, Fth>& v0, const Quad<Fst, Snd, Trd, Fth>& v1) {
    return (v0.fst == v1.fst) && (v0.snd == v1.snd) && (v0.trd == v1.trd) && (v0.fth == v1.fth); }

template<class Fst, class Snd, class Trd, class Fth>
inline bool operator<(const Quad<Fst, Snd, Trd, Fth>& v0, const Quad<Fst, Snd, Trd, Fth>& v1) {
    return v0.fst < v1.fst || (!(v1.fst < v0.fst) && (v0.snd < v1.snd || (!(v1.snd < v0.snd) && (v0.trd < v1.trd || (!(v1.trd < v0.trd) && (v0.fth < v1.fth)))))); }

template<class Fst, class Snd, class Trd, class Fth>
inline Quad<Fst, Snd, Trd, Fth> make_tuple(const Fst& fst, const Snd& snd, const Trd& trd, const Fth& fth) {
    return Quad<Fst, Snd, Trd, Fth>(fst, snd, trd, fth); }


template<class Fst, class Snd, class Trd, class Fth>
struct Hash_default<Quad<Fst, Snd, Trd, Fth> > {
    uint64 hash(const Quad<Fst, Snd, Trd, Fth >& v) const {
        uint64 hfst = defaultHash(v.fst);
        uint64 hsnd = defaultHash(v.snd);
        uint64 htrd = defaultHash(v.trd);
        uint64 hfth = defaultHash(v.fth);
        return hfst ^ ((hsnd << 16) | (hsnd >> 48)) ^ ((htrd << 32) | (htrd >> 32)) ^ ((hfth << 48) | (hfth >> 16)); }
    bool equal(const Quad<Fst, Snd, Trd, Fth>& v0, const Quad<Fst, Snd, Trd, Fth>& v1) const {
        return v0 == v1; }
};


template<class Fst, class Snd, class Trd, class Fth>
struct LQuad {
    Fst& fst;
    Snd& snd;
    Trd& trd;
    Fth& fth;

    LQuad(Fst& fst_, Snd& snd_, Trd& trd_, Fth& fth_) : fst(fst_), snd(snd_), trd(trd_), fth(fth_) {}
    LQuad& operator=(const Quad<Fst, Snd, Trd, Fth>& p) { fst = p.fst; snd = p.snd; trd = p.trd; fth = p.fth; return *this; }
};


template<class Fst, class Snd, class Trd, class Fth>
inline LQuad<Fst, Snd, Trd, Fth> l_tuple(Fst& fst, Snd& snd, Trd& trd, Fth& fth) {
    return LQuad<Fst, Snd, Trd, Fth>(fst, snd, trd, fth); }


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
}
