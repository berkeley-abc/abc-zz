//_________________________________________________________________________________________________
//|                                                                                      -- INFO --
//| Name        : Mem_UniAlloc.ihh
//| Author(s)   : Niklas Een
//| Module      : Prelude
//| Description : Allocation and freeing of uniform objects.
//| 
//| (C) Copyright 2010-2014, The Regents of the University of California
//|________________________________________________________________________________________________
//|                                                                                  -- COMMENTS --
//| 
//| Allocate and free single instances of type 'T'. Allocation is done in chunks of 'cap' (defaults
//| to 200). Freeing is done by free lists (so last freed object will be returned at next call to
//| 'alloc()').
//|________________________________________________________________________________________________


// 'cap' is the number of 'T's allocated in each chunk. Too small means frequent calls to malloc;
// too large means more unused memory at the end of the last chunk. 
//
// NOTE! It is inefficient to use this allocator for 'T's smaller than a pointer (either 32 or 64
// bits). For that reason we have a static assertion to forbid that.
//
template<class T, uint cap = 200>
class UniAlloc {
    union TElem {       // -- either a single 'T' element or, if in the free list, a pointer
        char    elem[sizeof(T)];
        TElem*  next;
    };

    StackAlloc<T, cap, 1> mem;
    TElem*                free_list;

public:
    typedef T Elem;

    UniAlloc() : free_list(NULL) { static_assert_(sizeof(T) == sizeof(TElem)); }
   ~UniAlloc() { clear(); }

    T*   alloc();       // -- Returns a pointer to a 'T'-sized, uninitialized piece of memory.
    void free(T* ptr);
    void clear();       // -- Free all allocations.
    void moveTo(UniAlloc<T,cap>& dst);
};


//=================================================================================================
// Implementation:


template<class T, uint cap>
inline T* UniAlloc<T,cap>::alloc()
{
    if (free_list){
        T* result = reinterpret_cast<T*>(free_list);
        free_list = free_list->next;
        return result;
    }else
        return mem.alloc();
}


template<class T, uint cap>
inline void UniAlloc<T,cap>::free(T* ptr)
{
    TElem* node = reinterpret_cast<TElem*>(ptr);
    node->next = free_list;
    free_list = node;
}


template<class T, uint cap>
inline void UniAlloc<T,cap>::clear()
{
    mem.clear();
    free_list = NULL;
}


template<class T, uint cap>
inline void UniAlloc<T,cap>::moveTo(UniAlloc<T,cap>& dst)
{
    dst.clear();
    mem.moveTo(dst.mem);
    dst.free_list = free_list;
    free_list = NULL;
}
