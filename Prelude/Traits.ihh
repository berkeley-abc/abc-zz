//_________________________________________________________________________________________________
//|                                                                                      -- INFO --
//| Name        : Traits.ihh
//| Author(s)   : Niklas Een
//| Module      : Prelude
//| Description : Minimal support for traits.
//| 
//| (C) Copyright 2010-2014, The Regents of the University of California
//|________________________________________________________________________________________________
//|                                                                                  -- COMMENTS --
//| 
//| Boost defines a plethora of traits in a very complicated manner. I choose to give up on this
//| approach and just define the bare minimum I can survive with. 
//| 
//| Some non-trait related meta-programming is also included in this file.
//|________________________________________________________________________________________________

namespace ZZ {
using namespace std;


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// The null type:


const struct Null_t { Null_t (){} } null_;  // -- intended to be used as default template argument.


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// True and False types:


struct True_t  { char padding[ 8]; enum { value = 1 }; };
struct False_t { char padding[16]; enum { value = 0 }; };
    // -- make sure the TRUE and the FALSE type are of different sizes

template<bool> struct ToBool_t;
template<> struct ToBool_t<0> { typedef False_t Result; };
template<> struct ToBool_t<1> { typedef True_t  Result; };


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Boxing types:


template<class T, class Dummy>
class Boxed {
    T val;
public:
    explicit Boxed() : val(T()) {}
    explicit Boxed(const T& val_) : val(val_) {}

    const T& operator *() const { return val; }
    T&       operator *()       { return val; }
};


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Tag types:


const struct Tag_copy { Tag_copy (){} } copy_;
    // -- this type is used as dummy parameter to constructors, essentially naming (or qualifying)
    // the type of construction to take place.

const struct Tag_packed { Tag_packed (){} } packed_;
    // -- used for accepting data bit-packed into a 'uint32' or similar.

const struct Tag_reserve { Tag_reserve (){} } reserve_;
    // -- reserve memory (but do not set size).

const struct Tag_append { Tag_append (){} } append_;
    // -- append data to a file or vector rather then overwrite.

const struct Tag_empty { Tag_empty (){} } empty_;
    // -- initialize to empty rather than null (for types that distinguish between the two)

const struct Tag_internal { Tag_internal (){} } internal_;
    // -- don't use this constructor, it is really internal

struct Dummy_size_ {};
typedef Boxed<uint, Dummy_size_> Size_;
    // -- used for optional size parameters

struct Dummy_num_ {};
typedef Boxed<uint, Dummy_num_> Num_;
    // -- used for optional "number" parameters


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Base exception class:


struct Excp {};     // -- All exceptions within 'ZZ' derive from this class


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Add constness:


template<class T> struct Const {
    typedef const T Result;
};

template<class T>
struct Const<const T> {     // -- if type already is 'const', do nothing (useful with templates)
    typedef const T Result;
};


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Predicate functor through virtual method:


template <class T>
struct VPred {
    virtual bool operator()(T t) = 0;
    virtual ~VPred() {}
};


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Non-copyable class:


// Derive from this if you want to disable copying. We prefer using the explicit methods:
// 'copyTo()' and 'moveTo()'.
//
class NonCopyable {
  #if defined(_MSC_VER)
    NonCopyable(const NonCopyable&) {}
  #else
    NonCopyable(const NonCopyable&);
  #endif
    const NonCopyable& operator=(const NonCopyable&);

protected:
    NonCopyable() {}        // -- 'NonCopyable' should only be used as base class.
   ~NonCopyable() {}
};


// Test if class derived from 'NonCopyable'. Everything else is assumed to be copyable (= has copy
// constructor and assignment operator defined publically).
//
// Usage: For type 'T', 'IsCopyable<T>::Result' is either the type 'True_t' or the type 'False_t'.
// Add '::value' to the expression if you want an enum value that is either 0 or 1.
//
template<class T>
class IsCopyable {
    static False_t test(NonCopyable* p);
    static True_t  test(...);
    static T* ptr;

public:
    typedef typename ToBool_t< sizeof(test(ptr)) == sizeof(True_t) >::Result Result;
};


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Test for empty struct:


template<class T>
struct IsEmptyStruct_helper : T {
    int64 x;
};

// Usage: For type 'T', 'IsEmptyStruct<T>::Result' (see 'NonCopyable' above)
template<class T>
struct IsEmptyStruct {
    typedef typename ToBool_t<sizeof(IsEmptyStruct_helper<T>) == sizeof(int64)>::Result Result;
};


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// No-operation:


macro void nop() {}
template<class T> macro void nop(T) {}
    // -- not really related to "traits", but related to meta-programming (which traits are about)


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Static 'log2' function (for bit-field sizing):


// How many bits are needed to represent 'x'?  -- 'ceil(log2(x + 1))'
#define Bits_Needed(x) (               \
    (unsigned(x) <=          0) ?  0 : \
    (unsigned(x) <=          1) ?  1 : \
    (unsigned(x) <=          3) ?  2 : \
    (unsigned(x) <=          7) ?  3 : \
    (unsigned(x) <=         15) ?  4 : \
    (unsigned(x) <=         31) ?  5 : \
    (unsigned(x) <=         63) ?  6 : \
    (unsigned(x) <=        127) ?  7 : \
    (unsigned(x) <=        255) ?  8 : \
    (unsigned(x) <=        511) ?  9 : \
    (unsigned(x) <=       1023) ? 10 : \
    (unsigned(x) <=       2047) ? 11 : \
    (unsigned(x) <=       4095) ? 12 : \
    (unsigned(x) <=       8191) ? 13 : \
    (unsigned(x) <=      16383) ? 14 : \
    (unsigned(x) <=      32767) ? 15 : \
    (unsigned(x) <=      65535) ? 16 : \
    (unsigned(x) <=     131071) ? 17 : \
    (unsigned(x) <=     262143) ? 18 : \
    (unsigned(x) <=     524287) ? 19 : \
    (unsigned(x) <=    1048575) ? 20 : \
    (unsigned(x) <=    2097151) ? 21 : \
    (unsigned(x) <=    4194303) ? 22 : \
    (unsigned(x) <=    8388607) ? 23 : \
    (unsigned(x) <=   16777215) ? 24 : \
    (unsigned(x) <=   33554431) ? 25 : \
    (unsigned(x) <=   67108863) ? 26 : \
    (unsigned(x) <=  134217727) ? 27 : \
    (unsigned(x) <=  268435455) ? 28 : \
    (unsigned(x) <=  536870911) ? 29 : \
    (unsigned(x) <= 1073741823) ? 30 : \
    (unsigned(x) <= 2147483647) ? 31 : \
                                  32 )


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// 'Compose' combinator for functors:


// Return 'f(g(x))', i.e. first apply 'g' then 'f' to that result.
template<class F, class G>
struct Compose {
    typedef typename G::Key   Key;
    typedef typename F::Value Value;

    const F& f;
    const G& g;
    Compose() {}
    Compose(const F& f_) : f(f_) {}
    Compose(const F& f_, const G& g_) : f(f_), g(g_) {}
    Compose(Null_t, const G& g_) : g(g_) {}

    Value operator()(const Key& elem) const { return f(g(elem)); }
};


// USAGE: compose(f, g)  =  \x.f(g(x))
template<class Map1, class Map2>
Compose<Map1,Map2> compose(const Map1& m1, const Map2& m2) {
    return Compose<Map1,Map2>(m1, m2); }


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Convert functors on '[]' operator to standard functors on '()':


// Convert a class with 'Value operator[](Key)' to a unit functor with 'operator()'.
template<class F, class Key_ = typename F::Key, class Value_ = typename F::Value>
struct BrackToParen {
    typedef Key_   Key;
    typedef Value_ Value;

    const F& f;
    BrackToParen() {}
    BrackToParen(const F& f_) : f(f_) {}

    Value operator()(const Key& elem) const { return f[elem]; }
};


// USAGE: brack<RetType,ArgType>(obj)
template<class Value, class Key, class F>
BrackToParen<F,Key,Value> brack(const F& f) {
    return BrackToParen<F,Key,Value>(f); }


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Common functor generators:


template<class T>
struct Size {
    typedef T    Key;
    typedef uind Value;
    uind operator()(const T& v) const { return v.size(); }
};


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
}
