//_________________________________________________________________________________________________
//|                                                                                      -- INFO --
//| Name        : Streams.icc
//| Author(s)   : Niklas Een
//| Module      : Prelude
//| Description : 
//| 
//| (C) Copyright 2010-2014, The Regents of the University of California
//|________________________________________________________________________________________________
//|                                                                                  -- COMMENTS --
//| gzip compatible output.
//|                                                                                  
//| An 'Out' object can work in 4 modes derived from the following two attributes:
//| 
//|   - Storing data in an internal memory buffer or passing it on to a 'Writer'.
//|   - Keeping data as is (plain), or compressing it (with libz).
//| 
//| If using the internal memory buffer and not compressing the data, the underlying vector
//| can be accessed by calling 'base()'. Alternatively, the 'moveTo()' method can be called
//| after all output is produced. This will work also for compressed data (which will be
//| flushed first). It is illegal to use the 'Out' object after calling 'moveTo()'
//| 
//| If using a 'Writer', a fixed size small internal buffer will be used. Once filled up,
//| it will pass the data on to the writer. (If compression is turned on, the libz part
//| will also use a buffer for the uncompressed data, but this doesn't affect the interface.)
//|________________________________________________________________________________________________

namespace ZZ {
using namespace std;


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// In:


void In::init(cchar* src_data, uind size, bool gzipped)
{
    data = const_cast<char*>(src_data); // -- I won't touch it, promise.
    sz   = size;
    assert(zbuf == NULL);               // -- fields should have been cleared before calling this method
    assert(pos == 0);

    if (!gzipped){
        reader = NULL;
        Z = NULL;

    }else{
        reader = (Reader*)1;            // -- just to make the check 'if (reader)' be TRUE for compressed streams

        Z = xmalloc<z_stream>();
        Z->zalloc   = Z_NULL;
        Z->zfree    = Z_NULL;
        Z->opaque   = Z_NULL;
        Z->avail_in = sz;
        Z->next_in  = (uchar*)data;
        int st = inflateInit2(Z, 31/*gzip format*/);
        assert(st == Z_OK);     // -- no resason to fail
        data = xmalloc<char>(OUTPUT_BUF_SZ);
        sz   = OUTPUT_BUF_SZ;

        fillBuf();
    }
}


void In::init(Reader& rd, bool gzipped)
{
    data   = xmalloc<char>(OUTPUT_BUF_SZ);
    sz     = ~OUTPUT_BUF_SZ;    // -- intentionally inverted
    reader = &rd;
    assert(zbuf == NULL);               // -- fields should have been cleared before calling this method
    assert(pos == 0);

    if (!gzipped)
        Z = NULL;

    else{
        zbuf = xmalloc<uchar>(ZSTREAM_BUF_SZ);
        Z = xmalloc<z_stream>();
        Z->zalloc   = Z_NULL;
        Z->zfree    = Z_NULL;
        Z->opaque   = Z_NULL;
        Z->avail_in = 0;
        Z->next_in  = Z_NULL;
        int st = inflateInit2(Z, 31/*gzip format*/);
        assert(st == Z_OK);     // -- no resason to fail
    }

    fillBuf();
}


void In::clear()
{
    if (reader){
        xfree(data);
        if (Z){
            if (reader != (void*)1)
                xfree(zbuf);
            inflateEnd(Z);
            ZZ::xfree(Z);
        }
    }
    zero();
}


void In::fillBuf()
{
    if (!Z){
        uind n = reader->getChars(data, ~sz);
        if (n < ~sz) sz = n;

    }else{
        if (Z->avail_in == 0){
            if (reader == (void*)1){ clear(); throw Excp_InZstreamError(); }
            Z->next_in  = zbuf;
            Z->avail_in = reader->getChars((char*)zbuf, ZSTREAM_BUF_SZ);
            if (Z->avail_in == 0){ clear(); throw Excp_InZstreamError(); }
        }

        Z->next_out  = (uchar*)data;
        Z->avail_out = OUTPUT_BUF_SZ;
        int ret = inflate(Z, Z_NO_FLUSH);
        sz = OUTPUT_BUF_SZ - Z->avail_out;
        if (ret != Z_STREAM_END){
            if (ret != Z_OK || sz == 0) { clear(); throw Excp_InZstreamError(); }
            sz = ~sz;
        }else{
            if (reader != (void*)1){
                xfree(zbuf);
                zbuf = NULL; }
            inflateEnd(Z);
            ZZ::xfree(Z);
            Z = NULL;
        }
    }

    pos = 0;
}


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
// Out:


//=================================================================================================
// -- Specialized allocators for libz:


#if defined(sun)
extern "C" static void* zAlloc(void* alloc_data, uint items, uint size);
extern "C" static void zFree(void* alloc_data, void* ptr);
#endif


// The only purpose of these is to get rid of a spurios valgrind warning. But clearing the memory
// with 'memset', we avoid an "uninitialized read" error.
static
void* zAlloc(void*, uint items, uint size)
{
    uind n_bytes = uind(items) * uind(size);
    void* ret = xmalloc<char>(n_bytes);
    memset(ret, 0, n_bytes);
    return ret;
}


static
void zFree(void*, void* ptr)
{
    xfree(ptr);
}


//=================================================================================================
// -- 'Out' implementation:


void Out::finalFlush()
{
    if (Z){
        flushZ(Z_FINISH);
        deflateEnd(&Z->strm);
        xfree(Z);
        Z = NULL;
        writer = NULL;

    }else if (writer){
        writer->putChars(data.base(), data.size());
        writer = NULL;
    }
}


void Out::initZ(int level)
{
    Z = xmalloc<ZStreamBuf>();
    Z->sz = 0;

    assert(level >= -1 && level <= 9);
    Z->strm.zalloc = zAlloc;
    Z->strm.zfree  = zFree;
    Z->strm.opaque = NULL;

    int st = deflateInit2(&Z->strm, level, Z_DEFLATED, 31/*gzip format*/, 9, Z_DEFAULT_STRATEGY);
    assert(st == Z_OK);     // -- no reason to fail
}


void Out::flushZ(int libz_flush_level)
{
    if (Z->sz == 0) return;

    Z->strm.next_in  = Z->buf;
    Z->strm.avail_in = Z->sz;

    if (writer){
        // Fill up our internal buffer 'data', then pass it on to our writer:
        data.setSize(buf_size);
        do{
            Z->strm.next_out  = (uchar*)data.base();
            Z->strm.avail_out = buf_size;
            int st = deflate(&Z->strm, libz_flush_level); assert(st != Z_STREAM_ERROR);
            int wrote = buf_size - Z->strm.avail_out;
            if (wrote != 0)
                writer->putChars(data.base(), wrote);
        }while (Z->strm.avail_out == 0);

    }else{
        // Extend 'data' with compressed data from libz:
        do{
            data.reserve(data.size() + buf_size);
            Z->strm.next_out  = (uchar*)&data.end_();
            Z->strm.avail_out = data.capacity() - data.size();
            int st = deflate(&Z->strm, libz_flush_level); assert(st != Z_STREAM_ERROR);
            data.growTo(data.capacity() - Z->strm.avail_out);       // -- this line relies on the fact that extending a vector of 'char's won't clear the new data.
        }while (Z->strm.avail_out == 0);
    }

    Z->sz = 0;
}


//mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
}
